Notes on 
    C# identifiers, 
        data types, 
        declaration, and 
        initialization:

============================Identifiers============================
Identifiers are names given to various program elements 
such as variables, methods, classes, etc. 

Rules for Identifiers:
- Must start with a letter or an underscore (_).
- Can contain letters, digits, and underscores.
- Case-sensitive (myVariable and myvariable are different).
- Cannot be a reserved keyword (e.g., int, class).

Examples:
csharp
int myVariable;
string _name;
double totalAmount;


============================Data Types============================
C# data types specify the type of data that a variable can hold. 
They are categorized into value types and reference types.

Value Types
Value types store data directly and include:
- Integral Types: 
    int, long, short, byte, uint, ulong, ushort, sbyte
- Floating Point Types: 
    float, double
- Decimal Types: 
    decimal
- Boolean Type: 
    bool
- Character Type: 
    char
- Structs: 
    User-defined value types
- Enumerations: 
    enum

Examples:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
int age = 25;
float temperature = 98.6F;
bool isActive = true;
char grade = 'A';
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Reference Types
Reference types store references to the actual data and include:
- String: string
- Arrays: int[], string[]
- Class: class
- Interface: interface
- Delegates: delegate
- Objects: object

Examples:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
string name = "Alice";
int[] numbers = { 1, 2, 3, 4, 5 };
MyClass obj = new MyClass();
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

============================Declaration============================
Declaration involves specifying the type and name of a variable.

Syntax:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
dataType variableName;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Examples:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
int count;
string message;
bool isAvailable;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

============================Initialization============================
Initialization assigns an initial value 
to a variable at the time of declaration or later.

Syntax:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
dataType variableName = initialValue;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Examples:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
int count = 10;
string message = "Hello, World!";
bool isAvailable = true;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

============================Declaration and Initialization Together============================
Variables can be declared and initialized 
in a single statement.

Examples:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
int count = 10;
string message = "Hello, World!";
bool isAvailable = true;
double price = 99.99;
char letter = 'A';
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

============================Implicitly Typed Local Variables============================
You can use the var keyword to declare variables 
when the type can be inferred 
from the assigned value.

Examples:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
var count = 10;           // int
var message = "Hello";    // string
var price = 99.99;        // double
var isAvailable = true;   // bool
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

============================Constants============================
Constants are immutable values that are known 
at compile-time and do not change 
for the life of the program.

Syntax:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
const dataType constantName = value;
^^^^^^^^^^^^^^^^

Examples:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
const int DaysInWeek = 7;
const double Pi = 3.14159;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

============================Readonly Fields============================
Readonly fields can be assigned 
at the time of declaration or in the constructor, 
but not changed thereafter.

Examples:
^^^^^^^^^^^^^^^^csharp^^^^^^^^^^^^^^^^
public class MyClass
{
    public readonly int myReadonlyField = 10;

    public MyClass(int value)
    {
        myReadonlyField = value;
    }
}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

============================Summary============================
- Identifiers: 
    Names for variables, methods, classes, etc. 
    (e.g., myVariable, CalculateSum).
- Data Types: 
    Define the type of data 
    (e.g., int, string, bool).
- Declaration: 
    Declaring a variable 
    (e.g., int count;).
- Initialization: 
    Assigning a value to a variable 
    (e.g., int count = 10;).

These concepts are fundamental in C# programming, 
providing the basis for writing clear and effective code.