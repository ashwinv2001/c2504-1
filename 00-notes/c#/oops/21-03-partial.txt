============================================
        `partial` keyword
        - to define the class in multiple files     : partial class 
        - to define the struct in multiple files    : partial struct 
        - to define the interface in multiple files : partial interface
============================================

In C#, the `partial` keyword is used 
to split the definition of a 
class, struct, interface, or method across multiple files. 

This can be useful when working on large classes, 
where splitting the code into different files can make 
it more manageable and organized. 

The `partial` keyword allows different parts of a class 
to be defined in different files, and 
the compiler will combine them 
into a single class when the program is compiled.

Key Features of a Partial Class:
1. Split Across Files: 
    A class can be split across multiple files, 
    but all parts must be marked with the `partial` keyword.
2. Single Definition: 
    Even though the class is split, 
    it will be treated as a single class by the compiler.
3. Same Namespace: 
    All parts of a partial class must be in the same namespace.
4. Can Contain Methods, Fields, Properties: 
    Different parts can contain methods, fields, properties, etc., 
    and they can work together as if they were all defined in one file.

Example of a Partial Class:

Suppose you have a class `Person` that is split across two files.

File 1: `Person.Part1.cs`
```csharp
namespace MyApplication
{
    public partial class Person
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }

        public void DisplayFullName()
        {
            Console.WriteLine($"{FirstName} {LastName}");
        }
    }
}
```

File 2: `Person.Part2.cs`
```csharp
namespace MyApplication
{
    public partial class Person
    {
        public int Age { get; set; }

        public void DisplayAge()
        {
            Console.WriteLine($"Age: {Age}");
        }
    }
}
```

Usage:

```csharp
class Program
{
    static void Main()
    {
        Person person = new Person
        {
            FirstName = "John",
            LastName = "Doe",
            Age = 30
        };

        person.DisplayFullName();  // Output: John Doe
        person.DisplayAge();       // Output: Age: 30
    }
}
```

Key Points:
- Unified Class: 
    Even though `Person` is split across two files, 
    it behaves as a single class with all properties and methods combined.
- Organization: 
    Partial classes are particularly useful 
    for keeping code organized, 
    especially in large projects or when dealing 
    with automatically generated code 
    (like designer files in WinForms or WPF).
- Same Accessibility: 
    All parts of the partial class must have the same accessibility 
    (e.g., `public`, `internal`, etc.).
- Common Use Cases: 
    Partial classes are often used in scenarios 
    where code is auto-generated, such as in designer files in Visual Studio, 
    allowing the user to write custom code 
    in one part and the designer to generate code in another.

Benefits:
- Maintainability: 
    Easier to maintain large classes by splitting them into logical parts.
- Team Collaboration: 
    Multiple developers can work on different parts of the same class 
    without causing conflicts in a single file.

Using partial classes helps in better code organization and 
can be particularly beneficial in large-scale projects.


================================================================
                           partial method                     


A partial method in C# is a method that is declared within a partial class or struct but is only optionally implemented. If the partial method is not implemented, the method declaration is removed at compile time, meaning it has no overhead. Partial methods allow developers to define hooks or extension points in one part of a class while giving other developers the option to implement them in another part.

Key Concepts of Partial Methods

1. Declared in Partial Classes/Structs: 
   - Partial methods can only exist within partial classes or partial structs. This allows a class or struct to be split across multiple files.
  
2. Optional Implementation:
   - The implementation of a partial method is optional. If a partial method is declared but not implemented, the compiler removes both the declaration and any calls to the method.

3. No Return Value:
   - Partial methods must return `void`; they cannot return any value.

4. No Modifiers:
   - Partial methods are implicitly `private` and cannot have access modifiers (like `public`, `private`, `protected`) or modifiers such as `virtual`, `abstract`, `override`, or `static`.

5. No Parameters with `out` Modifier:
   - A partial method can have parameters, but it cannot have `out` parameters. It can, however, have `ref` parameters.

6. Use Cases:
   - Partial methods are useful for providing extension points, such as in code generated by tools where developers can add custom logic without altering the generated code.

Example of a Partial Method

Imagine you have a partial class split across two files, and you want to provide a hook for additional logic when updating an employee's salary:

File 1: Employee.Partial.cs
```csharp
public partial class Employee
{
    public string Name { get; set; }
    public decimal Salary { get; set; }

    // Partial method declaration
    partial void OnSalaryChanging(decimal newSalary);

    public void UpdateSalary(decimal newSalary)
    {
        // Call the partial method before changing the salary
        OnSalaryChanging(newSalary);
        Salary = newSalary;
    }
}
```

File 2: Employee.Custom.cs
```csharp
public partial class Employee
{
    // Partial method implementation (optional)
    partial void OnSalaryChanging(decimal newSalary)
    {
        Console.WriteLine($"Salary is changing to: {newSalary:C}");
    }
}
```

Explanation

1. Declaration: In the first file (`Employee.Partial.cs`), the partial method `OnSalaryChanging` is declared but not implemented. This method is intended to be called just before updating an employee's salary.

2. Implementation: In the second file (`Employee.Custom.cs`), the partial method `OnSalaryChanging` is optionally implemented. In this example, it writes a message to the console whenever the salary is about to change.

3. Optional Nature: If the implementation of `OnSalaryChanging` in the second file is omitted, the call to `OnSalaryChanging` in `UpdateSalary` will be removed by the compiler. This allows the class to function normally without the need for the method.

Benefits of Partial Methods

- Flexibility: Partial methods provide a flexible way to extend or customize behavior without requiring changes to existing code.
- Performance: Since non-implemented partial methods are removed during compilation, thereâ€™s no runtime overhead associated with them.
- Code Generation: They are particularly useful in scenarios where part of the class is auto-generated (e.g., by tools like Entity Framework or a Visual Studio designer), and the developer wants to inject custom logic.

In summary, partial methods are a powerful feature in C# that provide optional extension points within partial classes or structs, allowing for flexible and maintainable code.