CRUD operations with a SQL Server database using C#:

1. Define the `Trainer` class (CLR Object)
2. Define the `TrainerDAO` class (Data Access Object) for CRUD operations
3. Define the `TrainerUI` class for user interaction
4. Create the `Main` method to tie everything together

1. Define the `Trainer` Class

This class represents the data model for a `Trainer`.

```csharp
public class Trainer
{
    public int Id { get; set; }  // Identity column, auto-incremented
    public string Name { get; set; }
    public string Place { get; set; }
    public string Skill { get; set; }

    // Constructor
    public Trainer() { }

    public Trainer(int id, string name, string place, string skill)
    {
        Id = id;
        Name = name;
        Place = place;
        Skill = skill;
    }
}
```

2. Define the `TrainerDAO` Class

This class handles CRUD operations for the `Trainer` class.

```csharp
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

public class TrainerDAO
{
    private string connectionString = "your_connection_string_here";

    // Create a new Trainer
    public void Create(Trainer trainer)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            string query = "INSERT INTO Trainers (Name, Place, Skill) VALUES (@Name, @Place, @Skill)";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@Name", trainer.Name);
            cmd.Parameters.AddWithValue("@Place", trainer.Place);
            cmd.Parameters.AddWithValue("@Skill", trainer.Skill);

            conn.Open();
            cmd.ExecuteNonQuery();
        }
    }

    // Read a Trainer by ID
    public Trainer Read(int id)
    {
        Trainer trainer = null;
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            string query = "SELECT Id, Name, Place, Skill FROM Trainers WHERE Id = @Id";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@Id", id);

            conn.Open();
            SqlDataReader reader = cmd.ExecuteReader();
            if (reader.Read())
            {
                trainer = new Trainer
                {
                    Id = (int)reader["Id"],
                    Name = reader["Name"].ToString(),
                    Place = reader["Place"].ToString(),
                    Skill = reader["Skill"].ToString()
                };
            }
        }
        return trainer;
    }

    // Update a Trainer
    public void Update(Trainer trainer)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            string query = "UPDATE Trainers SET Name = @Name, Place = @Place, Skill = @Skill WHERE Id = @Id";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@Id", trainer.Id);
            cmd.Parameters.AddWithValue("@Name", trainer.Name);
            cmd.Parameters.AddWithValue("@Place", trainer.Place);
            cmd.Parameters.AddWithValue("@Skill", trainer.Skill);

            conn.Open();
            cmd.ExecuteNonQuery();
        }
    }

    // Delete a Trainer by ID
    public void Delete(int id)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            string query = "DELETE FROM Trainers WHERE Id = @Id";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@Id", id);

            conn.Open();
            cmd.ExecuteNonQuery();
        }
    }

    // List all Trainers
    public List<Trainer> ListAll()
    {
        List<Trainer> trainers = new List<Trainer>();
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            string query = "SELECT Id, Name, Place, Skill FROM Trainers";
            SqlCommand cmd = new SqlCommand(query, conn);

            conn.Open();
            SqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                Trainer trainer = new Trainer
                {
                    Id = (int)reader["Id"],
                    Name = reader["Name"].ToString(),
                    Place = reader["Place"].ToString(),
                    Skill = reader["Skill"].ToString()
                };
                trainers.Add(trainer);
            }
        }
        return trainers;
    }
}
```

3. Define the `TrainerUI` Class

This class is used for interacting with the user through the console.

```csharp
using System;
using System.Collections.Generic;

public class TrainerUI
{
    private TrainerDAO trainerDAO = new TrainerDAO();

    public void CreateTrainer()
    {
        Console.Write("Enter Name: ");
        string name = Console.ReadLine();
        Console.Write("Enter Place: ");
        string place = Console.ReadLine();
        Console.Write("Enter Skill: ");
        string skill = Console.ReadLine();

        Trainer trainer = new Trainer
        {
            Name = name,
            Place = place,
            Skill = skill
        };

        trainerDAO.Create(trainer);
        Console.WriteLine("Trainer created successfully.");
    }

    public void ReadTrainer()
    {
        Console.Write("Enter Trainer ID: ");
        int id = int.Parse(Console.ReadLine());

        Trainer trainer = trainerDAO.Read(id);
        if (trainer != null)
        {
            Console.WriteLine($"ID: {trainer.Id}");
            Console.WriteLine($"Name: {trainer.Name}");
            Console.WriteLine($"Place: {trainer.Place}");
            Console.WriteLine($"Skill: {trainer.Skill}");
        }
        else
        {
            Console.WriteLine("Trainer not found.");
        }
    }

    public void UpdateTrainer()
    {
        Console.Write("Enter Trainer ID: ");
        int id = int.Parse(Console.ReadLine());

        Trainer trainer = trainerDAO.Read(id);
        if (trainer != null)
        {
            Console.Write("Enter new Name: ");
            trainer.Name = Console.ReadLine();
            Console.Write("Enter new Place: ");
            trainer.Place = Console.ReadLine();
            Console.Write("Enter new Skill: ");
            trainer.Skill = Console.ReadLine();

            trainerDAO.Update(trainer);
            Console.WriteLine("Trainer updated successfully.");
        }
        else
        {
            Console.WriteLine("Trainer not found.");
        }
    }

    public void DeleteTrainer()
    {
        Console.Write("Enter Trainer ID: ");
        int id = int.Parse(Console.ReadLine());

        trainerDAO.Delete(id);
        Console.WriteLine("Trainer deleted successfully.");
    }

    public void ListAllTrainers()
    {
        List<Trainer> trainers = trainerDAO.ListAll();
        foreach (Trainer trainer in trainers)
        {
            Console.WriteLine($"ID: {trainer.Id}, Name: {trainer.Name}, Place: {trainer.Place}, Skill: {trainer.Skill}");
        }
    }
}
```

4. Main Driver Code

Finally, implement the `Main` method to provide a menu-driven interface.

```csharp
using System;

class Program
{
    static void Main(string[] args)
    {
        TrainerUI ui = new TrainerUI();
        bool running = true;

        while (running)
        {
            Console.WriteLine("\nTrainer Management System");
            Console.WriteLine("1. Create Trainer");
            Console.WriteLine("2. Read Trainer");
            Console.WriteLine("3. Update Trainer");
            Console.WriteLine("4. Delete Trainer");
            Console.WriteLine("5. List All Trainers");
            Console.WriteLine("6. Exit");

            Console.Write("Choose an option: ");
            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    ui.CreateTrainer();
                    break;
                case "2":
                    ui.ReadTrainer();
                    break;
                case "3":
                    ui.UpdateTrainer();
                    break;
                case "4":
                    ui.DeleteTrainer();
                    break;
                case "5":
                    ui.ListAllTrainers();
                    break;
                case "6":
                    running = false;
                    Console.WriteLine("Exiting...");
                    break;
                default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }
    }
}
```

Notes:
1. Connection String: Replace `"your_connection_string_here"` with your actual SQL Server connection string.
2. SQL Server Table: Ensure you have a SQL Server table named `Trainers` with columns `Id` (identity), `Name`, `Place`, and `Skill`.
3. Exception Handling: For production code, you should add exception handling to manage potential errors during database operations.

This setup provides a full CRUD interface for managing trainers using a console application in C#.