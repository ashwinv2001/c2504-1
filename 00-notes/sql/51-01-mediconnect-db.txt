"MediConnect" using SQL Server. 
Tables for 
    users, 
    patients, 
    appointments, and 
    messages.

Table Design

 1. Users Table
---------------------------------sql---------------------------------
CREATE TABLE Users (
    UserId INT IDENTITY(1,1) PRIMARY KEY,
    Username NVARCHAR(50) NOT NULL,
    Email NVARCHAR(100) NOT NULL UNIQUE,
    PasswordHash NVARCHAR(255) NOT NULL,
    Role NVARCHAR(50) CHECK (Role IN ('admin', 'doctor', 'nurse', 'staff')) NOT NULL,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE()
);
------------------------------------------------------------------

 2. Patients Table
---------------------------------sql---------------------------------
CREATE TABLE Patients (
    PatientId INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL,
    Dob DATE NOT NULL,
    Gender NVARCHAR(10) CHECK (Gender IN ('Male', 'Female', 'Other')) NOT NULL,
    Phone NVARCHAR(20),
    Email NVARCHAR(100),
    Address NVARCHAR(255),
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE()
);
------------------------------------------------------------------

 3. MedicalHistory Table
---------------------------------sql---------------------------------
CREATE TABLE MedicalHistory (
    MedicalHistoryId INT IDENTITY(1,1) PRIMARY KEY,
    PatientId INT FOREIGN KEY REFERENCES Patients(PatientId) ON DELETE CASCADE,
    Condition NVARCHAR(255) NOT NULL,
    DiagnosisDate DATE NOT NULL,
    Notes NVARCHAR(MAX),
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE()
);
------------------------------------------------------------------

 4. Appointments Table
---------------------------------sql---------------------------------
CREATE TABLE Appointments (
    AppointmentId INT IDENTITY(1,1) PRIMARY KEY,
    PatientId INT FOREIGN KEY REFERENCES Patients(PatientId) ON DELETE CASCADE,
    DoctorId INT FOREIGN KEY REFERENCES Users(UserId) ON DELETE CASCADE,
    Date DATE NOT NULL,
    Time TIME NOT NULL,
    Reason NVARCHAR(255),
    Status NVARCHAR(50) CHECK (Status IN ('scheduled', 'completed', 'canceled')) DEFAULT 'scheduled' NOT NULL,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE()
);
------------------------------------------------------------------

 5. Messages Table
---------------------------------sql---------------------------------
CREATE TABLE Messages (
    MessageId INT IDENTITY(1,1) PRIMARY KEY,
    FromUserId INT FOREIGN KEY REFERENCES Users(UserId) ON DELETE CASCADE,
    ToUserId INT FOREIGN KEY REFERENCES Users(UserId) ON DELETE CASCADE,
    Message NVARCHAR(MAX) NOT NULL,
    Timestamp DATETIME2 DEFAULT GETDATE(),
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE()
);
------------------------------------------------------------------

Integration with Electronic Health Records (EHRs)
To integrate with EHRs, you might have additional tables 
for EHR system interaction logs or mappings. 
Here is an example:

 6. EHR_IntegrationLogs Table
---------------------------------sql---------------------------------
CREATE TABLE EHR_IntegrationLogs (
    LogId INT IDENTITY(1,1) PRIMARY KEY,
    EHRSystem NVARCHAR(100) NOT NULL,
    PatientId INT FOREIGN KEY REFERENCES Patients(PatientId) ON DELETE CASCADE,
    Operation NVARCHAR(50) CHECK (Operation IN ('import', 'update')) NOT NULL,
    Status NVARCHAR(50) CHECK (Status IN ('success', 'failure')) NOT NULL,
    Details NVARCHAR(MAX),
    Timestamp DATETIME2 DEFAULT GETDATE()
);
------------------------------------------------------------------

Real-time Updates and Notifications
For real-time updates and notifications, 
you might want to add a table for storing notification preferences and logs:

 7. Notifications Table
---------------------------------sql---------------------------------
CREATE TABLE Notifications (
    NotificationId INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT FOREIGN KEY REFERENCES Users(UserId) ON DELETE CASCADE,
    Message NVARCHAR(255) NOT NULL,
    IsRead BIT DEFAULT 0,
    CreatedAt DATETIME2 DEFAULT GETDATE()
);
---------------------------------


Normalization is the process of structuring a relational database 
to reduce redundancy and improve data integrity. 
Let's explain 
    how each table in the "MediConnect" patient management system is normalized.

First Normal Form (1NF)
    1NF requires that each table has a primary key, 
    and each column contains atomic, indivisible values. 
    All tables listed satisfy 1NF.

Second Normal Form (2NF)
    2NF requires that the database is in 1NF and 
    that all non-key attributes are fully dependent on the primary key. 
    This means that there should be no partial dependency 
    of any column on the primary key. 
    All tables satisfy 2NF because each non-key attribute 
    is dependent on the primary key.

Third Normal Form (3NF)
    3NF requires that the database is in 2NF and 
    that all columns are not only dependent 
    on the primary key but also are non-transitively dependent on it. 
    This means there should be no transitive dependency 
    for non-prime attributes.

Users Table
- Primary Key: `UserId`
- Normalization: 
    The columns `Username`, `Email`, `PasswordHash`, and `Role` 
    are directly dependent on the primary key `UserId`. 
    There are no transitive dependencies.

Patients Table
- Primary Key: `PatientId`
- Normalization: The columns `Name`, `Dob`, `Gender`, `Phone`, `Email`, and `Address` 
are directly dependent on the primary key `PatientId`. 
There are no transitive dependencies.

MedicalHistory Table
- Primary Key: `MedicalHistoryId`
- Foreign Key: `PatientId`
- Normalization: The columns `Condition`, `DiagnosisDate`, and `Notes` 
are directly dependent on the primary key `MedicalHistoryId`. 
The `PatientId` is a foreign key 
that references the `Patients` table, 
ensuring the medical history is linked 
to a specific patient without redundancy. 
There are no transitive dependencies.

Appointments Table
- Primary Key: `AppointmentId`
- Foreign Keys: `PatientId`, `DoctorId`
- Normalization: The columns `Date`, `Time`, `Reason`, and `Status` 
are directly dependent on the primary key `AppointmentId`. 
The `PatientId` and `DoctorId` are foreign keys 
that reference the `Patients` and `Users` tables, respectively. 
This ensures appointments are linked to specific patients and doctors without redundancy. 
There are no transitive dependencies.

Messages Table
- Primary Key: `MessageId`
- Foreign Keys: `FromUserId`, `ToUserId`
- Normalization: The columns `Message` and `Timestamp` 
are directly dependent on the primary key `MessageId`. 
The `FromUserId` and `ToUserId` are foreign keys 
that reference the `Users` table, ensuring 
that messages are linked to specific users without redundancy. 
There are no transitive dependencies.

EHR_IntegrationLogs Table
- Primary Key: `LogId`
- Foreign Key: `PatientId`
- Normalization: The columns `EHRSystem`, `Operation`, 
`Status`, `Details`, and `Timestamp` are directly 
dependent on the primary key `LogId`. 
The `PatientId` is a foreign key that references 
the `Patients` table, ensuring logs 
are linked to specific patients without redundancy. 
There are no transitive dependencies.

Notifications Table
- Primary Key: `NotificationId`
- Foreign Key: `UserId`
- Normalization: The columns `Message`, `IsRead`, and `CreatedAt` 
are directly dependent on the primary key `NotificationId`. 
The `UserId` is a foreign key that references 
the `Users` table, ensuring notifications 
are linked to specific users without redundancy. 
There are no transitive dependencies.

Summary of Normalization
- 1NF: 
Each table has a primary key, 
and all columns contain atomic values.
- 2NF: 
All non-key attributes are 
fully dependent on the primary key.
- 3NF: 
All columns are non-transitively dependent on the primary key, 
with no transitive dependencies.

By structuring the tables in this manner, 
    redundancy is minimized, and data integrity is ensured, 
    which facilitates efficient data management and 
    retrieval in the "MediConnect" system.


Data entries for each table 
to help with learning queries using 
the designed SQL Server tables.

Example Data

1. Users Table
---------------------------------sql---------------------------------
INSERT INTO Users (Username, Email, PasswordHash, Role, CreatedAt, UpdatedAt)
VALUES
('admin', 'admin@mediconnect.com', 'hashed_password1', 'admin', GETDATE(), GETDATE()),
('dr_john', 'john.doe@mediconnect.com', 'hashed_password2', 'doctor', GETDATE(), GETDATE()),
('nurse_anna', 'anna.smith@mediconnect.com', 'hashed_password3', 'nurse', GETDATE(), GETDATE()),
('staff_mike', 'mike.jones@mediconnect.com', 'hashed_password4', 'staff', GETDATE(), GETDATE());
------------------------------------------------------------------

2. Patients Table
---------------------------------sql---------------------------------
INSERT INTO Patients (Name, Dob, Gender, Phone, Email, Address, CreatedAt, UpdatedAt)
VALUES
('Alice Johnson', '1985-04-12', 'Female', '123-456-7890', 'alice.johnson@gmail.com', '123 Elm St, Springfield', GETDATE(), GETDATE()),
('Bob Smith', '1990-08-22', 'Male', '234-567-8901', 'bob.smith@gmail.com', '456 Oak St, Springfield', GETDATE(), GETDATE());
------------------------------------------------------------------

3. MedicalHistory Table
---------------------------------sql---------------------------------
INSERT INTO MedicalHistory (PatientId, Condition, DiagnosisDate, Notes, CreatedAt, UpdatedAt)
VALUES
(1, 'Hypertension', '2020-01-15', 'Taking medication daily', GETDATE(), GETDATE()),
(1, 'Diabetes', '2019-06-22', 'On insulin therapy', GETDATE(), GETDATE()),
(2, 'Asthma', '2018-11-05', 'Using inhaler as needed', GETDATE(), GETDATE());
------------------------------------------------------------------

4. Appointments Table
---------------------------------sql---------------------------------
INSERT INTO Appointments (PatientId, DoctorId, Date, Time, Reason, Status, CreatedAt, UpdatedAt)
VALUES
(1, 2, '2024-08-10', '10:00', 'Routine Checkup', 'scheduled', GETDATE(), GETDATE()),
(2, 2, '2024-08-11', '11:00', 'Follow-up on asthma', 'scheduled', GETDATE(), GETDATE());
------------------------------------------------------------------

5. Messages Table
---------------------------------sql---------------------------------
INSERT INTO Messages (FromUserId, ToUserId, Message, Timestamp, CreatedAt, UpdatedAt)
VALUES
(2, 1, 'Please review the patient records before our meeting.', GETDATE(), GETDATE(), GETDATE()),
(1, 3, 'Schedule a meeting with the new patient.', GETDATE(), GETDATE(), GETDATE());
------------------------------------------------------------------

6. EHR_IntegrationLogs Table
---------------------------------sql---------------------------------
INSERT INTO EHR_IntegrationLogs (EHRSystem, PatientId, Operation, Status, Details, Timestamp)
VALUES
('Epic', 1, 'import', 'success', 'Imported patient records successfully.', GETDATE()),
('Cerner', 2, 'update', 'failure', 'Failed to update patient records.', GETDATE());
------------------------------------------------------------------

7. Notifications Table
---------------------------------sql---------------------------------
INSERT INTO Notifications (UserId, Message, IsRead, CreatedAt)
VALUES
(2, 'You have a new appointment scheduled for Alice Johnson on 2024-08-10 at 10:00.', 0, GETDATE()),
(3, 'Please confirm the new meeting with the patient.', 0, GETDATE());
------------------------------------------------------------------

 Sample Queries

1. Query to Get All Patients
---------------------------------sql---------------------------------
SELECT * FROM Patients;
------------------------------------------------------------------

2. Query to Get All Appointments for a Specific Doctor
---------------------------------sql---------------------------------
SELECT * FROM Appointments WHERE DoctorId = 2;
------------------------------------------------------------------

3. Query to Get Medical History for a Specific Patient
---------------------------------sql---------------------------------
SELECT * FROM MedicalHistory WHERE PatientId = 1;
------------------------------------------------------------------

4. Query to Get All Messages Sent by a Specific User
---------------------------------sql---------------------------------
SELECT * FROM Messages WHERE FromUserId = 2;
------------------------------------------------------------------

5. Query to Get All Users with the Role of 'doctor'
---------------------------------sql---------------------------------
SELECT * FROM Users WHERE Role = 'doctor';
------------------------------------------------------------------

6. Query to Get All Notifications for a Specific User
---------------------------------sql---------------------------------
SELECT * FROM Notifications WHERE UserId = 2;
------------------------------------------------------------------

7. Query to Get All Successful EHR Imports
---------------------------------sql---------------------------------
SELECT * FROM EHR_IntegrationLogs WHERE Operation = 'import' AND Status = 'success';
------------------------------------------------------------------

8. Query to Update the Status of an Appointment
---------------------------------sql---------------------------------
UPDATE Appointments
SET Status = 'completed'
WHERE AppointmentId = 1;
------------------------------------------------------------------

9. Query to Delete a Patient Record
---------------------------------sql---------------------------------
DELETE FROM Patients
WHERE PatientId = 2;
------------------------------------------------------------------

10. Query to Insert a New User
---------------------------------sql---------------------------------
INSERT INTO Users (Username, Email, PasswordHash, Role, CreatedAt, UpdatedAt)
VALUES ('dr_jane', 'jane.doe@mediconnect.com', 'hashed_password5', 'doctor', GETDATE(), GETDATE());
------------------------------------------------------------------
