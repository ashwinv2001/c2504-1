App.xaml 
```
<Application x:Class="ItenaryProject.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ItenaryProject"
             StartupUri="ItenaryListWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>

```


Itenary.cs 
```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ItenaryProject
{
    public class Itenary
    {
        public int Id { get; set; }
        public string Time { get; set; }
        public string ItenaryName { get; set; }
        public string About { get; set; }
        public double Price { get; set; }
    }
}
```


RelayCommand.cs 
```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace ItenaryProject
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }
        //
        
        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
        //
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        public void Execute(object parameter)
        {
            _execute();
        }
    }
}

```

ItenaryViewMode.cs 
```
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace ItenaryProject
{
    public delegate void DWidnowClose();
    public class IternaryViewModel : INotifyPropertyChanged
    {
        public DWidnowClose NewWindowClose;
        public DWidnowClose EditWindowClose;
        //
        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propName));
        }
        //        
        private Itenary _newItenary = null;
        public Itenary NewItenary { get => _newItenary;
                        set{  _newItenary = value; OnPropertyChanged(nameof(NewItenary)); } }
        //
        private Itenary _selectedItenary = null;
        public Itenary SelectedItenary
        {
            get => _selectedItenary;
            set { _selectedItenary = value; OnPropertyChanged(nameof(SelectedItenary)); }
        }
        //
        private ObservableCollection<Itenary> _iternaries = null;
        public ObservableCollection<Itenary> Iternaries { get => _iternaries;
            set { _iternaries = value; OnPropertyChanged(nameof(Iternaries)); } }
        //
        public ICommand CreateCommand { get;  }
        public ICommand UpdateCommand { get; }
        public ICommand DeleteCommand { get; }
        //
        public IternaryViewModel()
        {
            this.NewItenary = new Itenary { Id = 0, Time = "01:00am", ItenaryName = "z", About = "z", Price = 1 };
            this.Iternaries = new ObservableCollection<Itenary>
            {
                new Itenary{Id=1,Time="09:00am",ItenaryName="a",About="a",Price=10},
                new Itenary{Id=2,Time="11:00am",ItenaryName="b",About="b",Price=20}
            };
            CreateCommand = new RelayCommand(Create);
            UpdateCommand = new RelayCommand(Update);
            DeleteCommand = new RelayCommand(Delete);
        }
        public void Create()
        {
            int id = 1;
            if (Iternaries.Count > 0)
            {
                id = Iternaries[Iternaries.Count - 1].Id + 1;
            }
            Itenary newIternary = new Itenary
            {
                Id = id,
                Time = NewItenary.Time,
                ItenaryName = NewItenary.ItenaryName,
                About = NewItenary.About,
                Price = NewItenary.Price
            };
            var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            Iternaries.Add(newIternary);
            this.NewItenary = new Itenary { Id = 0, Time = "01:00am", ItenaryName = "z", About = "z", Price = 1 };
            //this.NewItenary.Id = 0;
            //..
            //this.NewItenary = NewItenary;
            result = MessageBox.Show(messageBoxText: "Created Successfully",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
            if (NewWindowClose != null)
            {
                NewWindowClose();
            }

        }
        public void Update()
        {
            if(this.SelectedItenary == null)
            {
                return;
            }
            this.SelectedItenary = this.SelectedItenary;
            var result = MessageBox.Show(messageBoxText: "Updated Successfully",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
            if (EditWindowClose != null)
            {
                EditWindowClose();
            }
        }
        public void Delete()
        {
            if (this.SelectedItenary == null)
            {
                return;
            }
            this.Iternaries.Remove(this.SelectedItenary);
            this.SelectedItenary = null;
        }
    }
}
```


ItenaryConfig.cs 
```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace ItenaryProject
{
    public static class ItenaryConfig
    {
        //forms 
        public static Window FrmNewIternary { get; set; }

        public static Window FrmEditIternary { get; set; } 
        //view model
        public static IternaryViewModel VueModel { get; set; } 

        static ItenaryConfig()
        {
            VueModel = new IternaryViewModel();
            FrmNewIternary = new NewIternaryWindow();
            FrmEditIternary = new EditItenaryWindow();
            
        }
    }
}
```


IternaryListWindow.xaml 
```
<Window x:Class="ItenaryProject.ItenaryListWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ItenaryProject"
        mc:Ignorable="d"
        Title="Itenary App" Height="450" Width="800" Closed="Window_Closed">
    <Canvas>
        <Button x:Name="btnNew" Content="New Itenary" Canvas.Left="35" Canvas.Top="44" HorizontalAlignment="Center" VerticalAlignment="Top" Width="108" Height="40" Click="btnNew_Click"/>
        <DataGrid  x:Name="grdIternaries" ItemsSource="{Binding Iternaries}"
                   SelectedItem="{Binding SelectedItenary, Mode=TwoWay}"
                   Height="244" Width="670" Canvas.Left="40" Canvas.Top="105" 
                   IsReadOnly="True" SelectionMode="Single" 
                   AreRowDetailsFrozen="True" AutoGenerateColumns="False">
            <DataGrid.Columns>
                <DataGridTextColumn Header="ID" Binding="{Binding Id}" />
                <DataGridTextColumn Header="Time" Binding="{Binding Time}"/>
                <DataGridTextColumn Header="Itenary" Binding="{Binding ItenaryName}"/>
                <DataGridTextColumn Header="About" Binding="{Binding About}"/>
                <DataGridTextColumn Header="Price" Binding="{Binding Price}"/>
            </DataGrid.Columns>
        </DataGrid>
        <Button x:Name="btnEdit" Content="Edit" Canvas.Left="42" Canvas.Top="364" Width="108" Height="40" HorizontalAlignment="Left" VerticalAlignment="Top" Click="btnEdit_Click"/>
        <Button x:Name="btnDelete" Content="Delete" Canvas.Left="160" Canvas.Top="364" Width="108" Height="40" HorizontalAlignment="Left" VerticalAlignment="Top" Command="{Binding DeleteCommand}"/>

    </Canvas>
</Window>
```

ItenaryListWindow.xaml.cs 
```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace ItenaryProject
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class ItenaryListWindow : Window
    {
        public ItenaryListWindow()
        {
            InitializeComponent();
            this.DataContext = ItenaryConfig.VueModel;
        }

        private void btnNew_Click(object sender, RoutedEventArgs e)
        {
            ItenaryConfig.FrmNewIternary.Show();
            NewIternaryWindow newIternaryWindow = (NewIternaryWindow)ItenaryConfig.FrmNewIternary;
            ItenaryConfig.VueModel.NewWindowClose = newIternaryWindow.WindowClose;
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void btnEdit_Click(object sender, RoutedEventArgs e)
        {
            if (grdIternaries.SelectedIndex == -1)
            {
                var result = MessageBox.Show(messageBoxText: "Please select iternary to edit",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
            ItenaryConfig.FrmEditIternary.Show();
            EditItenaryWindow editIternaryWindow = (EditItenaryWindow)ItenaryConfig.FrmEditIternary;
            ItenaryConfig.VueModel.EditWindowClose = editIternaryWindow.WindowClose;
        }
    }
}

```


NewIternaryWindow.xaml 
```
<Window x:Class="ItenaryProject.NewIternaryWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ItenaryProject"
        mc:Ignorable="d"
        Title="New Itenary" Height="450" Width="800" Closing="Window_Closing">
    <Canvas Width="330" Height="328"
     Background="Bisque" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="12,0,0,0">
        <TextBlock TextWrapping="Wrap" Text="ID" Canvas.Top="9" HorizontalAlignment="Left" VerticalAlignment="Center" Canvas.Left="7"/>
        <TextBox x:Name="txtID" Text="{Binding NewItenary.Id}"  Canvas.Left="158"  TextWrapping="Wrap"  Canvas.Top="6" Width="120" HorizontalAlignment="Left" VerticalAlignment="Center" IsReadOnly="True"/>
        <TextBlock  Canvas.Left="10" TextWrapping="Wrap" Text="Itenary" Canvas.Top="69" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBox x:Name="txtItenary" Canvas.Left="160" TextWrapping="Wrap" Text="{Binding NewItenary.ItenaryName}" Canvas.Top="66" Width="120" HorizontalAlignment="Left" VerticalAlignment="Top"/>
        <TextBlock Canvas.Left="10" TextWrapping="Wrap"  Canvas.Top="127" HorizontalAlignment="Left" VerticalAlignment="Center" Text="About"/>
        <TextBox x:Name="txtAbout" Canvas.Left="160" TextWrapping="Wrap" Text="{Binding NewItenary.About}" Canvas.Top="124" Width="125" HorizontalAlignment="Center" VerticalAlignment="Top" Height="65"/>
        <TextBlock Canvas.Left="13" TextWrapping="Wrap" Text="Price" Canvas.Top="229" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBox x:Name="txtPrice" Canvas.Left="160" TextWrapping="Wrap" Text="{Binding NewItenary.Price}" Canvas.Top="226" Width="120" HorizontalAlignment="Center" VerticalAlignment="Top" RenderTransformOrigin="0.417,3.621"/>
        <Button x:Name="btnCreate" Command="{Binding CreateCommand}" Content="Create Itenary" Canvas.Top="274" HorizontalAlignment="Center" VerticalAlignment="Top" Width="160"/>
        <TextBlock TextWrapping="Wrap" Text="Time" Canvas.Top="37" HorizontalAlignment="Left" VerticalAlignment="Center" Canvas.Left="7"/>
        <TextBox x:Name="txtTime" Canvas.Left="158" TextWrapping="Wrap" Text="{Binding NewItenary.Time}" Canvas.Top="34" Width="120" HorizontalAlignment="Center" VerticalAlignment="Top"/>

    </Canvas>
</Window>

```

NewIternaryWindow.xaml.cs 
```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ItenaryProject
{
    /// <summary>
    /// Interaction logic for NewIternaryWindow.xaml
    /// </summary>
    public partial class NewIternaryWindow : Window
    {
        public NewIternaryWindow()
        {
            InitializeComponent();
            this.DataContext = ItenaryConfig.VueModel;
        }
        public void WindowClose()
        {
            this.Hide();
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

```

EditItenaryWindow.xaml 
```
<Window x:Class="ItenaryProject.EditItenaryWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ItenaryProject"
        mc:Ignorable="d"
        Title="EditItenaryWindow" Height="450" Width="800" Closing="Window_Closing">
    <Canvas Width="330" Height="328"
     Background="Bisque" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="12,0,0,0">
        <TextBlock TextWrapping="Wrap" Text="ID" Canvas.Top="9" HorizontalAlignment="Left" VerticalAlignment="Center" Canvas.Left="7"/>
        <TextBox x:Name="txtID" Text="{Binding SelectedItenary.Id, UpdateSourceTrigger=PropertyChanged}"  Canvas.Left="158"  TextWrapping="Wrap"  Canvas.Top="6" Width="120" HorizontalAlignment="Left" VerticalAlignment="Center" IsReadOnly="True"/>
        <TextBlock  Canvas.Left="10" TextWrapping="Wrap" Text="Itenary" Canvas.Top="69" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBox x:Name="txtItenary" Canvas.Left="160" TextWrapping="Wrap" Text="{Binding SelectedItenary.ItenaryName, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="66" Width="120" HorizontalAlignment="Left" VerticalAlignment="Top"/>
        <TextBlock Canvas.Left="10" TextWrapping="Wrap"  Canvas.Top="127" HorizontalAlignment="Left" VerticalAlignment="Center" Text="About"/>
        <TextBox x:Name="txtAbout" Canvas.Left="160" TextWrapping="Wrap" Text="{Binding SelectedItenary.About, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="124" Width="125" HorizontalAlignment="Center" VerticalAlignment="Top" Height="65"/>
        <TextBlock Canvas.Left="13" TextWrapping="Wrap" Text="Price" Canvas.Top="229" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBox x:Name="txtPrice" Canvas.Left="160" TextWrapping="Wrap" Text="{Binding SelectedItenary.Price, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="226" Width="120" HorizontalAlignment="Center" VerticalAlignment="Top" RenderTransformOrigin="0.417,3.621"/>
        <Button x:Name="btnUpdate" Command="{Binding UpdateCommand}" Content="Update Itenary" Canvas.Top="274" HorizontalAlignment="Center" VerticalAlignment="Top" Width="160"/>
        <TextBlock TextWrapping="Wrap" Text="Time" Canvas.Top="37" HorizontalAlignment="Left" VerticalAlignment="Center" Canvas.Left="7"/>
        <TextBox x:Name="txtTime" Canvas.Left="158" TextWrapping="Wrap" Text="{Binding SelectedItenary.Time, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="34" Width="120" HorizontalAlignment="Center" VerticalAlignment="Top"/>

    </Canvas>
</Window>

```

EditItenaryWindow.xaml.cs 
```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ItenaryProject
{
    /// <summary>
    /// Interaction logic for EditItenaryWindow.xaml
    /// </summary>
    public partial class EditItenaryWindow : Window
    {
        public EditItenaryWindow()
        {
            InitializeComponent();
            DataContext = ItenaryConfig.VueModel;
        }
        public void WindowClose()
        {
            this.Hide();
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }

   
}

```