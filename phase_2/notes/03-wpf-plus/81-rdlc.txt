To create a simple printable report using RDLC that displays a table of employee data with the fields: Name, Salary, and Age, follow the steps outlined below:

Step-by-Step Guide to Create an RDLC Report

1. Set Up Your Project

1. Create a New Project: Open Visual Studio and create a new WPF or Windows Forms project.
2. Add RDLC Report: Right-click on your project, go to Add -> New Item, and select Report. Name it (e.g., `EmployeeReport.rdlc`).

2. Create a Data Source

You need a data source for your report. Here, I'll show you how to create a simple list of employees.

1. Create a Model Class:
   Create a class that represents an employee. For example:

   ```csharp
   public class Employee
   {
       public string Name { get; set; }
       public decimal Salary { get; set; }
       public int Age { get; set; }
   }
   ```

2. Create a Sample Data Method:
   Add a method to provide sample employee data in your main form or wherever you want to generate the report.

   ```csharp
   public List<Employee> GetSampleEmployees()
   {
       return new List<Employee>
       {
           new Employee { Name = "John Doe", Salary = 60000, Age = 30 },
           new Employee { Name = "Jane Smith", Salary = 75000, Age = 28 },
           new Employee { Name = "Alice Johnson", Salary = 50000, Age = 35 }
       };
   }
   ```

3. Design the RDLC Report

1. Open RDLC Designer: Open your `EmployeeReport.rdlc` file.
2. Add Data Source:
   - Right-click on Datasets in the Report Data panel.
   - Click on Add Dataset.
   - Name the dataset (e.g., `EmployeeDataSet`).
   - Choose Object and set the data source type to `List<Employee>`.
   - Click OK.

3. Add a Table to the Report:
   - Drag and drop a Table from the Toolbox onto the report design surface.
   - The Table wizard will open.
   - Select your EmployeeDataSet as the dataset for the table.

4. Configure the Table:
   - In the Table design, add columns for Name, Salary, and Age:
     - Drag the `Name` field to the first cell.
     - Drag the `Salary` field to the second cell.
     - Drag the `Age` field to the third cell.
   - You can adjust column widths, styles, and headers.

5. Add a Header:
   - Click on the Table Header to set the column titles (e.g., "Employee Name", "Salary", "Age").

6. Format Fields:
   - Click on the Salary cell and set the format to currency if necessary (Right-click -> Text Box Properties -> Number -> Currency).

4. Preview the Report

1. Create a ReportViewer in Your Form:
   If you are using WPF, use `WindowsFormsHost` to add a `ReportViewer` control. In Windows Forms, you can directly add a `ReportViewer` control.

   For WPF:
   ```xaml
   <WindowsFormsHost Name="windowsFormsHost">
       <wf:ReportViewer x:Name="reportViewer" />
   </WindowsFormsHost>
   ```

2. Load Data and Generate the Report:
   In your form's code-behind (e.g., MainWindow.xaml.cs), load the data and set the report data source:

   ```csharp
   using Microsoft.Reporting.WinForms; // Make sure to add the appropriate using directive

   private void LoadReport()
   {
       List<Employee> employees = GetSampleEmployees();
       ReportDataSource rds = new ReportDataSource("EmployeeDataSet", employees);
       
       reportViewer.LocalReport.ReportPath = "EmployeeReport.rdlc"; // Set the path to your RDLC file
       reportViewer.LocalReport.DataSources.Clear();
       reportViewer.LocalReport.DataSources.Add(rds);
       reportViewer.RefreshReport();
   }
   ```

3. Call the `LoadReport` method in your form's constructor or a button click event:

   ```csharp
   public MainWindow()
   {
       InitializeComponent();
       LoadReport();
   }
   ```

5. Print the Report
To print the report, you can use the Print functionality provided by the `ReportViewer` control:

```csharp
private void PrintReport()
{
    reportViewer.PrintDialog();
}
```

Conclusion

Following these steps will help you create a simple RDLC report that displays employee data with the specified fields. You can then print or export this report as needed. If you have further questions or need additional details, feel free to ask!


public List<Employee> GetSampleEmployees()
{
    return new List<Employee>
    {
        new Employee { Name = "John Doe", Salary = 60000, Age = 30 },
        new Employee { Name = "Jane Smith", Salary = 75000, Age = 28 },
        new Employee { Name = "Alice Johnson", Salary = 50000, Age = 35 }
    };
}


=============================================


Here are the three employee records you can use in your RDLC report along with the full implementation details to create the report in your application.

Employee Records

Here are the sample employee records:

| Name           | Salary   | Age |
|----------------|----------|-----|
| John Doe       | 60000    | 30  |
| Jane Smith     | 75000    | 28  |
| Alice Johnson   | 50000    | 35  |

Complete Implementation Steps

1. Create a Model Class:
   Define the `Employee` class as follows:

   ```csharp
   public class Employee
   {
       public string Name { get; set; }
       public decimal Salary { get; set; }
       public int Age { get; set; }
   }
   ```

2. Create Sample Data Method:
   Add a method to provide the sample employee data:

   ```csharp
   public List<Employee> GetSampleEmployees()
   {
       return new List<Employee>
       {
           new Employee { Name = "John Doe", Salary = 60000, Age = 30 },
           new Employee { Name = "Jane Smith", Salary = 75000, Age = 28 },
           new Employee { Name = "Alice Johnson", Salary = 50000, Age = 35 }
       };
   }
   ```

3. Set Up Your RDLC Report:

   - Add RDLC Report: Right-click your project, select Add -> New Item, and choose Report. Name it `EmployeeReport.rdlc`.

4. Design the RDLC Report:

   - Open the RDLC Designer: Open your `EmployeeReport.rdlc` file.
   - Add Data Source:
     - Right-click on Datasets in the Report Data panel.
     - Click Add Dataset.
     - Name the dataset `EmployeeDataSet`, choose Object, and set the data source type to `List<Employee>`, then click OK.

   - Add a Table to the Report:
     - Drag and drop a Table from the Toolbox onto the report.
     - Select `EmployeeDataSet` as the dataset for the table.

   - Configure the Table:
     - Add columns for Name, Salary, and Age by dragging the appropriate fields from `EmployeeDataSet` into the table cells.
     - Adjust the header titles to "Employee Name", "Salary", and "Age".

5. Add a Header:
   - Set the column titles in the Table Header.

6. Format Fields:
   - For the Salary field, right-click the cell, select Text Box Properties, then set the Number format to Currency.

7. Preview the Report:
   - After designing the report, you can preview it in the designer.

8. Integrate RDLC in Your Application:
   - Add a ReportViewer: If using WPF, use `WindowsFormsHost` to host the `ReportViewer`. In Windows Forms, you can add the `ReportViewer` control directly.

   - Load and Display the Report:
   Here’s how to load the report data and display it in your form:

   ```csharp
   using Microsoft.Reporting.WinForms; // Ensure you have this namespace

   public partial class MainWindow : Window
   {
       public MainWindow()
       {
           InitializeComponent();
           LoadReport();
       }

       private void LoadReport()
       {
           List<Employee> employees = GetSampleEmployees();
           ReportDataSource rds = new ReportDataSource("EmployeeDataSet", employees);
           
           reportViewer.LocalReport.ReportPath = "EmployeeReport.rdlc"; // Path to your RDLC file
           reportViewer.LocalReport.DataSources.Clear();
           reportViewer.LocalReport.DataSources.Add(rds);
           reportViewer.RefreshReport();
       }

       private List<Employee> GetSampleEmployees()
       {
           return new List<Employee>
           {
               new Employee { Name = "John Doe", Salary = 60000, Age = 30 },
               new Employee { Name = "Jane Smith", Salary = 75000, Age = 28 },
               new Employee { Name = "Alice Johnson", Salary = 50000, Age = 35 }
           };
       }

       private void PrintReport()
       {
           reportViewer.PrintDialog();
       }
   }
   ```

9. Run Your Application:
   - Execute your application to display the RDLC report with the three employee records.

Conclusion

By following these steps, you can create an RDLC report that displays the three specified employee records. You can customize the report further based on your requirements. If you have any more questions or need additional help, feel free to ask!

=============================================

Certainly! You can create both pie and column charts in an RDLC report. Below, I will guide you through the steps to add these charts and provide code snippets for each part of the implementation.

Steps to Create Pie and Column Charts in RDLC

1. Set Up Your Project and RDLC Report:
   Ensure you have a WPF or Windows Forms project with an RDLC report (e.g., `EmployeeReport.rdlc`). The report should already have a dataset defined (e.g., `EmployeeDataSet`) based on your `Employee` class.

2. Define Your Data:
   Use the following employee data with a modification to include the field necessary for charting. Here’s the updated `Employee` class and sample data:

   ```csharp
   public class Employee
   {
       public string Name { get; set; }
       public decimal Salary { get; set; }
       public int Age { get; set; }
   }
   ```

   Sample Data Method:

   ```csharp
   public List<Employee> GetSampleEmployees()
   {
       return new List<Employee>
       {
           new Employee { Name = "John Doe", Salary = 60000, Age = 30 },
           new Employee { Name = "Jane Smith", Salary = 75000, Age = 28 },
           new Employee { Name = "Alice Johnson", Salary = 50000, Age = 35 }
       };
   }
   ```

3. Add a Pie Chart and Column Chart to the RDLC Report:

   - Open your `EmployeeReport.rdlc` file in the designer.

   - Add a Pie Chart:
     1. Drag a Chart from the toolbox onto the report.
     2. In the Chart Wizard, select Pie Chart.
     3. Set Data Fields:
        - Values: Drag the `Salary` field to the Values section.
        - Category Groups: Drag the `Name` field to the Category Groups section.
     4. Finish the Wizard and format the chart as needed.

   - Add a Column Chart:
     1. Drag another Chart from the toolbox onto the report.
     2. In the Chart Wizard, select Column Chart.
     3. Set Data Fields:
        - Values: Drag the `Salary` field to the Values section.
        - Category Groups: Drag the `Name` field to the Category Groups section.
     4. Finish the Wizard and format the chart as needed.

4. Design and Format Your Charts:
   You can customize colors, labels, and titles for both charts to make them visually appealing.

5. Load the Report with Data:
   Make sure to load your report in your WPF or Windows Forms application, similar to the previous example.

Complete Implementation Code

Here’s how your form's code might look like with the `ReportViewer` setup to display both charts.

```csharp
using Microsoft.Reporting.WinForms;
using System.Collections.Generic;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadReport();
        }

        private void LoadReport()
        {
            List<Employee> employees = GetSampleEmployees();
            ReportDataSource rds = new ReportDataSource("EmployeeDataSet", employees);
            
            reportViewer.LocalReport.ReportPath = "EmployeeReport.rdlc"; // Path to your RDLC file
            reportViewer.LocalReport.DataSources.Clear();
            reportViewer.LocalReport.DataSources.Add(rds);
            reportViewer.RefreshReport();
        }

        private List<Employee> GetSampleEmployees()
        {
            return new List<Employee>
            {
                new Employee { Name = "John Doe", Salary = 60000, Age = 30 },
                new Employee { Name = "Jane Smith", Salary = 75000, Age = 28 },
                new Employee { Name = "Alice Johnson", Salary = 50000, Age = 35 }
            };
        }

        private void PrintReport()
        {
            reportViewer.PrintDialog();
        }
    }
}
```

Example RDLC Chart Configuration

In the RDLC Designer:

- For the Pie Chart:
  - Values: Set the field to `Sum(Salary)` (or just `Salary` based on your requirement).
  - Category Groups: Set the field to `Name`.

- For the Column Chart:
  - Values: Set the field to `Sum(Salary)` (or just `Salary`).
  - Category Groups: Set the field to `Name`.

Conclusion

With these steps and the provided code, you should be able to create and display both pie and column charts in your RDLC report using the specified employee data. Customize your charts further as needed, and if you have any more questions or need additional assistance, feel free to ask!