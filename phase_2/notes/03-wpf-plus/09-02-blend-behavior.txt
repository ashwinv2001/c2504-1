Yes, you can use the Blend SDK in Visual Studio 
to leverage behaviors and other interactivity features. 
The Blend SDK was originally a part of Expression Blend, 
but now its functionality has been integrated into Visual Studio, 
making it easier for developers to add interactivity to WPF applications.

Steps to Use Blend Behaviors in Visual Studio:

1. Install the Microsoft.Xaml.Behaviors.Wpf NuGet Package:
   The Blend SDK functionality, especially behaviors, is available 
   in the `Microsoft.Xaml.Behaviors.Wpf` NuGet package. 
   You need to install this package in your WPF project to use behaviors.

   Steps:
   - Right-click your WPF project in Visual Studio's Solution Explorer.
   - Choose Manage NuGet Packages.
   - In the Browse tab, search for `Microsoft.Xaml.Behaviors.Wpf`.
   - Select the package and click Install.

2. Add Namespaces in XAML:
   After installing the package, you need 
   to add the necessary namespaces in your XAML files 
   to access behaviors.

   Example:
   ```xaml
   <Window xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
           xmlns:ei="http://schemas.microsoft.com/xaml/behaviors/1.0">
       <!-- XAML code -->
   </Window>
   ```

3. Use Behaviors in XAML:
   Now you can start adding behaviors and triggers to your XAML controls 
   using the `i:Interaction.Triggers` tag and associated actions.

   Example: Call a method when a button is clicked.
   ```xaml
   <Window xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
           xmlns:ei="http://schemas.microsoft.com/xaml/behaviors/1.0">
       <Grid>
           <Button Content="Click Me" Width="100" Height="50">
               <i:Interaction.Triggers>
                   <i:EventTrigger EventName="Click">
                       <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnButtonClick"/>
                   </i:EventTrigger>
               </i:Interaction.Triggers>
           </Button>
       </Grid>
   </Window>
   ```

4. Add C# Code-Behind or ViewModel Logic:
   In this example, you would have a method `OnButtonClick` 
   in your ViewModel or code-behind that gets triggered 
   when the button is clicked.

   ```csharp
   public class MainViewModel
   {
       public void OnButtonClick()
       {
           MessageBox.Show("Button Clicked!");
       }
   }
   ```

Additional Features in the Blend SDK:

- EventTriggers: 
Define actions that should be performed 
when an event is triggered (e.g., button click, mouse enter).
- InvokeCommandAction: 
Bind a controlâ€™s event directly to a command 
in your ViewModel (great for MVVM patterns).
- ControlStoryboardsAction: 
Control animations and storyboards 
from the XAML without writing any C# code.
  
Using Blend for Visual Studio (Designer Tool)
Visual Studio includes Blend for Visual Studio, 
a designer tool that provides a visual interface 
for working with animations, styles, and behaviors. 
You can launch it from Visual Studio:
- Right-click your XAML file and select Design in Blend.

Advantages of Using Blend Behaviors:
- No Code-Behind: You can define interactions purely in XAML, 
keeping the logic separate from the UI.
- Designer-Friendly: Allows designers 
to add interactivity without writing code.
- MVVM-Friendly: Behaviors can easily bind to ViewModel commands, 
making them ideal for MVVM architecture.

By using the Microsoft.Xaml.Behaviors.Wpf package 
in Visual Studio, you can add rich interactive behaviors and 
maintain a clean separation of concerns in your WPF applications.