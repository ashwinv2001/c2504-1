4. List Controls in Windows Forms

List controls in Windows Forms are used 
to display a list of items 
from which users can select one or multiple options. 

These controls provide various ways 
to present lists and 
handle user selections in your applications.

Common List Controls:
1. ListBox (`ListBox`): 
Displays a list of items in a box 
from which the user can select one or more items.
2. ComboBox (`ComboBox`): 
A drop-down list that allows the user 
to select one item from a predefined list.
3. CheckedListBox (`CheckedListBox`): 
Similar to a `ListBox`, 
but each item has a checkbox 
to allow the user to select multiple items by checking them.
4. DataGridView (`DataGridView`): 
A highly customizable grid that can display tabular data, 
often used for more complex lists with multiple columns.

1. ListBox Control:
- The `ListBox` control allows users to select one or multiple items from a list. 
- It supports both single and multiple selection modes.

Key Properties of `ListBox`:
- Items: 
This property holds the collection of items displayed in the `ListBox`.
- SelectedIndex: 
Indicates the index of the currently selected item.
- SelectedItem: 
Gets the currently selected item.
- SelectionMode: 
Specifies how users can select items 
(e.g., `One`, `MultiSimple`, or `MultiExtended`).

Example: Using `ListBox` to Display a List of Contacts
```csharp
public class ContactForm : Form
{
    private ListBox contactListBox;

    public ContactForm()
    {
        contactListBox = new ListBox();
        contactListBox.Items.AddRange(new string[] { "Alice", "Bob", "Charlie" });
        contactListBox.Location = new Point(10, 10);
        contactListBox.Size = new Size(200, 100);

        contactListBox.SelectedIndexChanged += new EventHandler(ContactListBox_SelectedIndexChanged);

        Controls.Add(contactListBox);
    }

    private void ContactListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        MessageBox.Show("You selected: " + contactListBox.SelectedItem.ToString());
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.Run(new ContactForm());
    }
}
```
In this example:
- A `ListBox` displays a list of contacts (`Alice`, `Bob`, `Charlie`).
- The `SelectedIndexChanged` event triggers 
when the user selects an item, and 
the selected item is displayed in a `MessageBox`.

2. ComboBox Control:
- The `ComboBox` control displays a drop-down list 
from which the user can select one item.
- Users can also type text into the `ComboBox` (if allowed).

Key Properties of `ComboBox`:
- Items: Contains the list of items displayed in the `ComboBox`.
- SelectedIndex: Represents the index of the selected item.
- SelectedItem: Gets the selected item from the list.
- DropDownStyle: Specifies whether the combo box is editable 
(`DropDown`) or not (`DropDownList`).

Example: Using a `ComboBox` to Select a Country
```csharp
public class CountryForm : Form
{
    private ComboBox countryComboBox;

    public CountryForm()
    {
        countryComboBox = new ComboBox();
        countryComboBox.Items.AddRange(new string[] { "USA", "Canada", "Mexico" });
        countryComboBox.Location = new Point(10, 10);
        countryComboBox.Size = new Size(200, 25);

        countryComboBox.SelectedIndexChanged += new EventHandler(CountryComboBox_SelectedIndexChanged);

        Controls.Add(countryComboBox);
    }

    private void CountryComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        MessageBox.Show("Selected country: " + countryComboBox.SelectedItem.ToString());
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.Run(new CountryForm());
    }
}
```
In this example:
- A `ComboBox` is used to display a list of countries (`USA`, `Canada`, `Mexico`).
- The `SelectedIndexChanged` event shows the selected country 
when the user chooses an item from the list.

3. CheckedListBox Control:
- A `CheckedListBox` displays a list of items, 
each with a checkbox next to it, 
allowing the user to select multiple items.
- Useful for multi-selection 
where checkboxes are more intuitive than list selection.

Key Properties of `CheckedListBox`:
- CheckedItems: Gets the items 
that are checked in the `CheckedListBox`.
- CheckedIndices: Gets the indices of checked items.
- Items: Holds the collection of items in the list.

Example: Using a `CheckedListBox` to Select Hobbies
```csharp
public class HobbiesForm : Form
{
    private CheckedListBox hobbiesCheckedListBox;

    public HobbiesForm()
    {
        hobbiesCheckedListBox = new CheckedListBox();
        hobbiesCheckedListBox.Items.AddRange(new string[] { "Reading", "Traveling", "Gaming", "Cooking" });
        hobbiesCheckedListBox.Location = new Point(10, 10);
        hobbiesCheckedListBox.Size = new Size(200, 100);

        Button showSelectedButton = new Button();
        showSelectedButton.Text = "Show Selected";
        showSelectedButton.Location = new Point(10, 120);
        showSelectedButton.Click += ShowSelectedButton_Click;

        Controls.Add(hobbiesCheckedListBox);
        Controls.Add(showSelectedButton);
    }

    private void ShowSelectedButton_Click(object sender, EventArgs e)
    {
        string selectedHobbies = "Selected hobbies: ";
        foreach (string hobby in hobbiesCheckedListBox.CheckedItems)
        {
            selectedHobbies += hobby + ", ";
        }
        MessageBox.Show(selectedHobbies.TrimEnd(',', ' '));
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.Run(new HobbiesForm());
    }
}
```
In this example:
- A `CheckedListBox` contains a list of hobbies 
(`Reading`, `Traveling`, etc.).
- A button is used to show the selected hobbies when clicked.

4. DataGridView Control:
- `DataGridView` is a flexible grid control used 
to display data in a tabular format.
- It supports multiple columns, sorting, and 
even data binding with data sources like databases.

Key Properties of `DataGridView`:
- Columns: Defines the columns of the grid.
- Rows: Holds the data rows in the grid.
- DataSource: Allows you to bind the grid 
to a data source like a list, database, or array.

Example: Using `DataGridView` to Display a List of Contacts
```csharp
public class ContactGridForm : Form
{
    private DataGridView contactDataGridView;

    public ContactGridForm()
    {
        contactDataGridView = new DataGridView();
        contactDataGridView.Location = new Point(10, 10);
        contactDataGridView.Size = new Size(400, 200);

        contactDataGridView.ColumnCount = 3;
        contactDataGridView.Columns[0].Name = "Name";
        contactDataGridView.Columns[1].Name = "Phone Number";
        contactDataGridView.Columns[2].Name = "Email";

        contactDataGridView.Rows.Add("Alice", "123-456-7890", "alice@example.com");
        contactDataGridView.Rows.Add("Bob", "987-654-3210", "bob@example.com");

        Controls.Add(contactDataGridView);
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.Run(new ContactGridForm());
    }
}
```
In this example:
- A `DataGridView` displays a list of contacts in a table format 
with columns for `Name`, `Phone Number`, and `Email`.
- The contact data is manually added to the grid.

Conclusion:
List controls like `ListBox`, `ComboBox`, 
`CheckedListBox`, and `DataGridView` 
are essential 
for displaying and interacting with lists of data in Windows Forms. 
Each control serves different purposes, 
from simple list selection to more complex data grids, 
allowing developers 
to create user-friendly interfaces tailored 
to their applications' needs.