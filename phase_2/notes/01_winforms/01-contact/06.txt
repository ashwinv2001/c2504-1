6. Menus, Toolbars, and Status Bars in Windows Forms

Menus, toolbars, and status bars are essential elements 
in Windows Forms applications, 
enhancing user experience 
by providing easy access to commands and feedback. 
These controls are used for organizing commands, 
offering shortcuts, and 
displaying information about the application's current state.

1. Menus
Menus provide a structured way 
to organize and present actions to users. 
Windows Forms provides a `MenuStrip` control 
to create menus in a hierarchical manner.

Creating a Menu:
- MenuStrip: The main control used to create menus.
- ToolStripMenuItem: Represents individual items 
in the menu (can include sub-menus).

Example: Adding a Menu to a Form
```csharp
public class MainForm : Form
{
    public MainForm()
    {
        MenuStrip menuStrip = new MenuStrip();
        ToolStripMenuItem fileMenu = new ToolStripMenuItem("File");
        ToolStripMenuItem openItem = new ToolStripMenuItem("Open");
        ToolStripMenuItem saveItem = new ToolStripMenuItem("Save");
        ToolStripMenuItem exitItem = new ToolStripMenuItem("Exit");

        // Adding menu items to the File menu
        fileMenu.DropDownItems.Add(openItem);
        fileMenu.DropDownItems.Add(saveItem);
        fileMenu.DropDownItems.Add(exitItem);

        // Adding the File menu to the MenuStrip
        menuStrip.Items.Add(fileMenu);

        // Adding MenuStrip to the form
        this.Controls.Add(menuStrip);

        // Assigning event handlers
        exitItem.Click += (s, e) => this.Close();
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.Run(new MainForm());
    }
}
```
In this example:
- The `MenuStrip` is created and added to the form.
- A `File` menu is created with `Open`, `Save`, and `Exit` items.
- The `Exit` item is wired to close the form when clicked.

---

2. Toolbars
Toolbars provide a quick way for users 
to access common actions through buttons and icons. 
In Windows Forms, the `ToolStrip` control is used 
to create toolbars.

Creating a Toolbar:
- ToolStrip: Used to create toolbars with buttons and drop-down lists.
- ToolStripButton: Represents individual buttons in the toolbar.
- ToolStripDropDownButton: Allows the creation of drop-down buttons.

Example: Adding a Toolbar with Buttons
```csharp
public class MainForm : Form
{
    public MainForm()
    {
        // Create ToolStrip
        ToolStrip toolStrip = new ToolStrip();

        // Create buttons
        ToolStripButton newButton = new ToolStripButton("New");
        ToolStripButton openButton = new ToolStripButton("Open");
        ToolStripButton saveButton = new ToolStripButton("Save");

        // Add buttons to the ToolStrip
        toolStrip.Items.Add(newButton);
        toolStrip.Items.Add(openButton);
        toolStrip.Items.Add(saveButton);

        // Add ToolStrip to the form
        this.Controls.Add(toolStrip);

        // Event handling for toolbar buttons
        newButton.Click += (s, e) => MessageBox.Show("New Clicked");
        openButton.Click += (s, e) => MessageBox.Show("Open Clicked");
        saveButton.Click += (s, e) => MessageBox.Show("Save Clicked");
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.Run(new MainForm());
    }
}
```
In this example:
- A `ToolStrip` is created and populated 
with `ToolStripButton` controls 
for "New", "Open", and "Save" actions.
- Event handlers for button clicks are added 
to show a message box when buttons are clicked.

---

3. Status Bars
A `StatusStrip` control is used 
to display information about the current state of the application, 
usually at the bottom of the form.

Creating a Status Bar:
- StatusStrip: Represents the status bar.
- ToolStripStatusLabel: Displays text or information in the status bar.
- ProgressBar: Can also be added to the status bar to show progress.

Example: Adding a Status Bar
```csharp
public class MainForm : Form
{
    private ToolStripStatusLabel statusLabel;

    public MainForm()
    {
        // Create StatusStrip
        StatusStrip statusStrip = new StatusStrip();
        statusLabel = new ToolStripStatusLabel();
        statusStrip.Items.Add(statusLabel);

        // Add StatusStrip to the form
        this.Controls.Add(statusStrip);

        // Simulate status change
        statusLabel.Text = "Ready";

        Button simulateWorkButton = new Button();
        simulateWorkButton.Text = "Simulate Work";
        simulateWorkButton.Click += SimulateWorkButton_Click;
        Controls.Add(simulateWorkButton);
    }

    private void SimulateWorkButton_Click(object sender, EventArgs e)
    {
        statusLabel.Text = "Working...";
        // Simulate work
        System.Threading.Thread.Sleep(2000);
        statusLabel.Text = "Ready";
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.Run(new MainForm());
    }
}
```
In this example:
- A `StatusStrip` is added to the form 
with a `ToolStripStatusLabel` 
to display status text.
- A button simulates a work process, 
updating the status label to show "Working..." and 
reverting it to "Ready" after the work is done.

---

Conclusion:
Menus, toolbars, and status bars are key components 
in designing a user-friendly Windows Forms application. 
`MenuStrip` provides an intuitive way to organize commands, 
`ToolStrip` offers quick access to common actions, and 
`StatusStrip` displays real-time information 
about the application's state. 
By combining these elements, 
you can create a rich and responsive user interface.