5. Working with Dialogs in Windows Forms

Dialogs in Windows Forms are specialized windows that pop up to interact with users. 
They are typically used for specific tasks such as providing information, 
gathering input, or confirming actions. 
Windows Forms provide various built-in dialog boxes and 
the ability to create custom dialogs.

Types of Dialogs:
1. MessageBox: Displays a simple message and collects user input (e.g., OK/Cancel).
2. Common Dialogs: Predefined dialogs provided 
by the `System.Windows.Forms` namespace for file selection, 
color picking, font selection, etc.
3. Custom Dialogs: 
Custom forms designed by developers for specific tasks.

---

1. MessageBox
`MessageBox` is a simple dialog for showing messages and collecting basic responses from users.

Key Methods and Properties:
- MessageBox.Show(): Displays the message box.
- DialogResult: Captures the result of the user’s action (e.g., OK, Cancel).

Example: Displaying a Confirmation Message
```csharp
DialogResult result = MessageBox.Show("Do you want to delete this contact?", "Delete Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
if (result == DialogResult.Yes)
{
    // Delete the contact
}
else
{
    // Do nothing
}
```
In this example:
- The `MessageBox.Show` method displays a message asking 
if the user wants to delete a contact, with options "Yes" and "No".
- Based on the user’s response, 
the program either deletes the contact or does nothing.

---

2. Common Dialogs
Windows Forms provide a set of built-in dialogs for common tasks, 
available in the `System.Windows.Forms` namespace:

- OpenFileDialog: Allows users to select files from their file system.
- SaveFileDialog: Allows users to specify a file path to save data.
- ColorDialog: Lets users choose a color.
- FontDialog: Lets users choose a font.
- FolderBrowserDialog: Enables users to select a folder.

Example: Using `OpenFileDialog` to Open a File
```csharp
OpenFileDialog openFileDialog = new OpenFileDialog();
openFileDialog.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*";
openFileDialog.Title = "Open a File";

if (openFileDialog.ShowDialog() == DialogResult.OK)
{
    string filePath = openFileDialog.FileName;
    MessageBox.Show("File selected: " + filePath);
}
```
In this example:
- The `OpenFileDialog` is used to select a file.
- The `Filter` property restricts the selection to specific file types.
- When the user selects a file and clicks OK, 
the selected file’s path is displayed in a message box.

Example: Using `ColorDialog` to Pick a Color
```csharp
ColorDialog colorDialog = new ColorDialog();
if (colorDialog.ShowDialog() == DialogResult.OK)
{
    this.BackColor = colorDialog.Color; // Set the form's background color to the selected color
}
```
In this example:
- The `ColorDialog` allows the user to select a color, and 
the background color of the form is changed to the selected color.

---

3. Custom Dialogs
Custom dialogs are created by designing new forms 
that can be shown as modal dialogs. 
This gives developers more control over the dialog’s content and behavior.

Creating a Custom Dialog:
1. Create a new form that will serve as the dialog.
2. Add controls such as labels, text boxes, buttons, etc., 
to collect or display information.
3. Use the `ShowDialog` method 
to display the custom dialog as a modal dialog 
(i.e., the user must interact with the dialog 
before returning to the main form).

Example: Custom Dialog to Enter Contact Details
```csharp
// MainForm.cs
public class MainForm : Form
{
    private Button addButton;

    public MainForm()
    {
        addButton = new Button();
        addButton.Text = "Add Contact";
        addButton.Click += AddButton_Click;
        Controls.Add(addButton);
    }

    private void AddButton_Click(object sender, EventArgs e)
    {
        // Show the custom AddContactForm as a modal dialog
        AddContactForm addContactForm = new AddContactForm();
        if (addContactForm.ShowDialog() == DialogResult.OK)
        {
            string name = addContactForm.ContactName;
            string phone = addContactForm.ContactPhone;
            MessageBox.Show($"Added contact: {name}, {phone}");
        }
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.Run(new MainForm());
    }
}

// AddContactForm.cs
public class AddContactForm : Form
{
    private TextBox nameTextBox;
    private TextBox phoneTextBox;
    private Button okButton;
    private Button cancelButton;

    public string ContactName { get; private set; }
    public string ContactPhone { get; private set; }

    public AddContactForm()
    {
        nameTextBox = new TextBox() { Location = new Point(20, 20) };
        phoneTextBox = new TextBox() { Location = new Point(20, 60) };

        okButton = new Button() { Text = "OK", Location = new Point(20, 100) };
        okButton.Click += OkButton_Click;

        cancelButton = new Button() { Text = "Cancel", Location = new Point(100, 100) };
        cancelButton.Click += CancelButton_Click;

        Controls.Add(nameTextBox);
        Controls.Add(phoneTextBox);
        Controls.Add(okButton);
        Controls.Add(cancelButton);
    }

    private void OkButton_Click(object sender, EventArgs e)
    {
        // Retrieve the contact details and close the dialog
        ContactName = nameTextBox.Text;
        ContactPhone = phoneTextBox.Text;
        this.DialogResult = DialogResult.OK;
        this.Close();
    }

    private void CancelButton_Click(object sender, EventArgs e)
    {
        this.DialogResult = DialogResult.Cancel;
        this.Close();
    }
}
```
In this example:
- A custom dialog `AddContactForm` is created 
to collect contact information (name and phone number).
- The `ShowDialog()` method displays the dialog, and 
if the user clicks OK, the contact details are returned to the main form.

---

Conclusion:
Working with dialogs in Windows Forms is essential 
for interacting with users. Whether using simple `MessageBox` dialogs, 
common file dialogs, or designing custom dialogs 
for more complex interactions, 
dialog boxes provide a powerful way 
to gather user input and perform various tasks 
in your application.