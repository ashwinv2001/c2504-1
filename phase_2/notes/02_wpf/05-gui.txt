WPF GUI

Windows Presentation Foundation (WPF) is a modern UI framework 
for building rich Windows desktop applications. 
It provides a wide range of controls, layout systems, and 
customization options to design robust and 
responsive graphical user interfaces.

a. WPF Controls
WPF includes various built-in controls, 
which can be customized or styled 
as per the application's requirements.

1. Button: Represents a clickable button.
   ```xaml
   <Button Content="Click Me" Width="100" Height="30" />
   ```

2. Label: Used to display text.
   ```xaml
   <Label Content="This is a label" />
   ```

3. TextBox: Allows the user to input text.
   ```xaml
   <TextBox Width="200" Height="30" />
   ```

4. ToolTip: Provides help or hints when the user hovers over a control.
   ```xaml
   <Button Content="Hover me">
       <Button.ToolTip>
           <ToolTip Content="This is a tooltip" />
       </Button.ToolTip>
   </Button>
   ```

5. RadioButton: Allows the user to select one option from a set.
   ```xaml
   <RadioButton Content="Option 1" IsChecked="True" />
   <RadioButton Content="Option 2" />
   ```

6. CheckBox: Represents a box that can be checked or unchecked.
   ```xaml
   <CheckBox Content="I agree to the terms" />
   ```

7. ListBox: Displays a list of items.
   ```xaml
   <ListBox>
       <ListBoxItem Content="Item 1" />
       <ListBoxItem Content="Item 2" />
   </ListBox>
   ```

8. ComboBox: A dropdown menu 
that allows the user to select one item from a list.
   ```xaml
   <ComboBox>
       <ComboBoxItem Content="Item 1" />
       <ComboBoxItem Content="Item 2" />
   </ComboBox>
   ```

b. Layouts
Layouts in WPF control the arrangement of UI elements. 
WPF provides several layout panels 
for organizing elements in different ways.

1. Sizing and Positioning: WPF provides flexible ways 
to size and position elements. 
Controls can use properties 
like `Width`, `Height`, `Margin`, and `Padding` 
to set their size and position.

2. Transforms: WPF supports transformations 
such as scaling, rotating, and skewing UI elements. 
   ```xaml
   <Button Content="Rotated Button">
       <Button.RenderTransform>
           <RotateTransform Angle="45" />
       </Button.RenderTransform>
   </Button>
   ```

3. Canvas: Allows absolute positioning of child elements.
   ```xaml
   <Canvas>
       <Button Content="Button 1" Canvas.Left="50" Canvas.Top="50" />
   </Canvas>
   ```

4. Shapes: You can draw shapes such as rectangles, ellipses, and lines.
   ```xaml
   <Rectangle Fill="Blue" Width="100" Height="50" />
   ```

5. StackPanel: Arranges child elements into a single line, 
either horizontally or vertically.
   ```xaml
   <StackPanel Orientation="Vertical">
       <Button Content="Button 1" />
       <Button Content="Button 2" />
   </StackPanel>
   ```

6. WrapPanel: Arranges child elements in a sequence, 
wrapping them to the next line when space runs out.
   ```xaml
   <WrapPanel>
       <Button Content="Button 1" />
       <Button Content="Button 2" />
       <Button Content="Button 3" />
   </WrapPanel>
   ```

7. DockPanel: Aligns child elements 
to the left, right, top, bottom, or center.
   ```xaml
   <DockPanel>
       <Button Content="Top" DockPanel.Dock="Top" />
       <Button Content="Bottom" DockPanel.Dock="Bottom" />
   </DockPanel>
   ```

8. Grid: A flexible layout that allows 
for positioning elements in rows and columns.
   ```xaml
   <Grid>
       <Grid.RowDefinitions>
           <RowDefinition Height="Auto" />
           <RowDefinition Height="*" />
       </Grid.RowDefinitions>
       <Button Content="Button 1" Grid.Row="0" />
       <Button Content="Button 2" Grid.Row="1" />
   </Grid>
   ```

9. Scrolling: Elements inside containers like `ScrollViewer` 
can be made scrollable.
   ```xaml
   <ScrollViewer Height="200" Width="200">
       <StackPanel>
           <TextBlock Text="Scrollable content" />
           <!-- Add more content here -->
       </StackPanel>
   </ScrollViewer>
   ```

10. Scaling: Elements can be resized proportionally 
based on their parent container's size.

c. Dialogs
Dialogs are pop-up windows used to interact with the user. 
WPF supports different types of dialogs.

1. Message boxes: Used to display simple messages or questions to the user.
   ```csharp
   MessageBox.Show("This is a message", "Title", 
   MessageBoxButton.OK, MessageBoxImage.Information);
   ```

2. Win32 common dialogs: WPF can use Win32 file open/save dialogs 
via the `Microsoft.Win32` namespace.
   ```csharp
   var dialog = new Microsoft.Win32.OpenFileDialog();
   bool? result = dialog.ShowDialog();
   if (result == true)
   {
       string filename = dialog.FileName;
   }
   ```

3. Custom modal dialogs: Block interaction 
with the main window until the dialog is closed.
   ```xaml
   <Window x:Class="CustomModalDialog"
           Title="Modal Dialog" 
           WindowStartupLocation="CenterOwner" 
           ShowInTaskbar="False" 
           SizeToContent="WidthAndHeight" />
   ```

4. Custom modeless dialogs: Allow interaction 
with other windows while the dialog is open.

d. Custom Controls of WPF
WPF allows creating custom controls, 
enabling reuse and providing functionality 
that isn't available in built-in controls. 
Custom controls can be created in two primary ways:
1. User Controls: 
These are simpler and created 
by grouping existing WPF controls into a reusable unit. 
They are defined using XAML and are useful 
when you need to encapsulate multiple UI elements.
   ```xaml
   <UserControl x:Class="MyApp.CustomButtonControl">
       <Button Content="Custom Button" />
   </UserControl>
   ```

2. Custom Controls: 
These are more advanced and provide greater flexibility. 
Custom controls extend existing WPF controls or 
create completely new ones by deriving 
from `Control` or other base classes.
   ```csharp
   public class MyCustomControl : Control
   {
       static MyCustomControl()
       {
           DefaultStyleKeyProperty.OverrideMetadata(typeof(MyCustomControl),
               new FrameworkPropertyMetadata(typeof(MyCustomControl)));
       }
   }
   ```
   You would typically define a default style 
   in `Themes/Generic.xaml` for a custom control.

Summary:
WPF provides an extensive set of controls and 
layout management techniques to create responsive and rich UIs. 
It offers flexibility in designing dialogs and 
supports both built-in and custom controls 
for complex scenarios. 
WPF's layout system, along with its powerful 
data binding and control customization features, 
makes it a comprehensive framework 
for building modern Windows applications.