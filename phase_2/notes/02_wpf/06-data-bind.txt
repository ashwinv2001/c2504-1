Data Binding in WPF

Data binding in WPF connects UI elements to data sources, 
enabling automatic updates between the UI and 
the underlying data model. 
It allows for a clean separation between 
the user interface (view) and the logic 
(view model or data model).

a. Binding Sources
The source of the data can be various types, 
such as simple properties, collections, or complex objects. 
The source can also be a `CLR` object, XML, or a database.

- Example of a simple binding to a property:
  ```xaml
  <TextBox Text="{Binding Path=UserName}" />
  ```
  Here, `UserName` is a property in the data context (view model) 
  that the `TextBox` binds to.

b. Sharing Sources with DataContext
The `DataContext` property in WPF allows you 
to set the binding source for multiple controls in a container, 
making it easier to share data sources across elements.

- Example of setting the `DataContext` for a container (e.g., Grid):
  ```xaml
  <Grid DataContext="{Binding User}">
      <TextBox Text="{Binding Path=Name}" />
      <TextBox Text="{Binding Path=Age}" />
  </Grid>
  ```
  This assumes that `User` is an object 
  with `Name` and `Age` properties. 
  All child controls within the `Grid` 
  will automatically inherit the same `DataContext`.

c. Data Templates
Data templates define how data-bound items should be displayed. 
They're especially useful when displaying collections 
in controls like `ListBox`, `ComboBox`, or `ItemsControl`.

- Example of a data template for a `ListBox`:
  ```xaml
  <ListBox ItemsSource="{Binding Employees}">
      <ListBox.ItemTemplate>
          <DataTemplate>
              <StackPanel Orientation="Horizontal">
                  <TextBlock Text="{Binding Name}" />
                  <TextBlock Text="{Binding Age}" Margin="10,0,0,0" />
              </StackPanel>
          </DataTemplate>
      </ListBox.ItemTemplate>
  </ListBox>
  ```
  In this case, the `Employees` collection is bound to the `ListBox`, 
  and each item is displayed using the template defined in `DataTemplate`.

d. Value Converters
Value converters in WPF are used to transform the bound value 
before it is displayed in the UI or vice versa. 
The `IValueConverter` interface is used to create a converter.

- Example of a simple value converter to convert a boolean to visibility:
  ```csharp
  public class BooleanToVisibilityConverter : IValueConverter
  {
      public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
      {
          return (bool)value ? Visibility.Visible : Visibility.Collapsed;
      }

      public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
      {
          throw new NotImplementedException();
      }
  }
  ```

- Using the converter in XAML:
  ```xaml
  <Window.Resources>
      <local:BooleanToVisibilityConverter x:Key="BoolToVisConverter" />
  </Window.Resources>

  <TextBox Text="Visible when True" Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisConverter}}" />
  ```

e. Collection Views
A `CollectionView` provides a way to sort, filter, 
and group data in a collection before it is displayed. 
Every `ItemsControl` (like `ListBox` or `ComboBox`) 
automatically wraps its `ItemsSource` collection in a `CollectionView`.

- Example of using a `CollectionView` for sorting and filtering:
  ```xaml
  <ListBox ItemsSource="{Binding}">
      <ListBox.Resources>
          <CollectionViewSource x:Key="filteredCollection" Source="{Binding}">
              <CollectionViewSource.SortDescriptions>
                  <scm:SortDescription PropertyName="Name" Direction="Ascending" />
              </CollectionViewSource.SortDescriptions>
              <CollectionViewSource.Filter>
                  <scm:FilterEventHandler MethodName="FilterEmployees" />
              </CollectionViewSource.Filter>
          </CollectionViewSource>
      </ListBox.Resources>
  </ListBox>
  ```

- In the code-behind:
  ```csharp
  private void FilterEmployees(object sender, FilterEventArgs e)
  {
      var employee = e.Item as Employee;
      if (employee != null && employee.Age > 30)
          e.Accepted = true;
      else
          e.Accepted = false;
  }
  ```

f. Data Providers
Data providers in WPF (like `XmlDataProvider` or `ObjectDataProvider`) 
are used to bind to XML or objects. 
This allows data to be loaded from different sources into UI elements.

- Example of using `ObjectDataProvider` to bind to a method:
  ```xaml
  <Window.Resources>
      <ObjectDataProvider x:Key="employeeProvider" ObjectType="{x:Type local:EmployeeManager}" MethodName="GetEmployees" />
  </Window.Resources>

  <ListBox ItemsSource="{Binding Source={StaticResource employeeProvider}}" />
  ```

g. Validation Rules
WPF supports validating data entered by users. 
You can define custom validation rules 
to handle input validation during data binding.

- Example of a custom validation rule:
  ```csharp
  public class AgeValidationRule : ValidationRule
  {
      public override ValidationResult Validate(object value, CultureInfo cultureInfo)
      {
          int age;
          if (int.TryParse(value.ToString(), out age) && age > 0 && age < 120)
              return ValidationResult.ValidResult;
          return new ValidationResult(false, "Age must be between 1 and 120");
      }
  }
  ```

- Using the validation rule in XAML:
  ```xaml
  <TextBox>
      <TextBox.Text>
          <Binding Path="Age" UpdateSourceTrigger="PropertyChanged">
              <Binding.ValidationRules>
                  <local:AgeValidationRule />
              </Binding.ValidationRules>
          </Binding>
      </TextBox.Text>
  </TextBox>
  ```

h. Focus on Binding and Controls Together
Data binding in WPF allows for easy synchronization 
between controls and their underlying data. 
It is essential to understand how to use binding together with controls.

1. Binding a TextBox to a property in the view model:
   ```xaml
   <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" />
   ```

2. Binding a CheckBox to a boolean property:
   ```xaml
   <CheckBox IsChecked="{Binding IsSubscribed}" Content="Subscribe to newsletter" />
   ```

3. Binding a ComboBox to a collection:
   ```xaml
   <ComboBox ItemsSource="{Binding Countries}" SelectedItem="{Binding SelectedCountry}" />
   ```

4. Two-way data binding (most common in forms):
   ```xaml
   <TextBox Text="{Binding Name, Mode=TwoWay}" />
   ```

Summary:
Data binding in WPF connects UI elements to data sources, 
ensuring automatic synchronization 
between the user interface and the underlying data model. 
Concepts such as `DataContext`, 
value converters, collection views, and 
validation rules allow developers 
to create interactive, robust, and 
responsive UIs in WPF applications.