internal class Programs
{
    public static async Task<int> DoSquare(int a)
    {
        System.Threading.Thread.Sleep(3000); // Simulate async work
        return a * a;
    }

    public static void TestFetchDataAsync()
    {
        DoSquare(5).ContinueWith(task => Console.WriteLine(task.Result));
        Console.WriteLine("After 5");
        DoSquare(6).ContinueWith(task => Console.WriteLine(task.Result));
        Console.WriteLine("After 6");
    }
    public static async void TestFetchDataAsync2()
    {
        var sevenSq = await DoSquare(7);
        Console.WriteLine(sevenSq);
        Console.WriteLine("After 7");
        var eightSq = await DoSquare(8);
        Console.WriteLine(eightSq);
        Console.WriteLine("After 8");
    }

    delegate string DProcessStr(string a, string b);
    static void Main()
    {

        var person = new { firstName = "Mahendrasingh", lastName = "Dhoni", Age = 30 };

        DProcessStr findFullName = delegate (string firstName, string lastName)
        {
            return firstName + " " + lastName;
        };
        Func<string, string, string> formGreetings = (string greetText, string name) =>
        {
            return greetText + " " + name;
        };

        //Func<string, string, string> formGreetings = (string greetText, string name) =>  greetText + " " + name;
        //Action<string> printGreetings = (string greet) => Console.WriteLine(greet);

        //Func<string, string, string> formGreetings = (greetText, name) =>  greetText + " " + name;
        //Action<string> printGreetings = greet => Console.WriteLine(greet);
        //printGreetings(formGreetings("hi", "rohit"));


        string fullName = findFullName(person.firstName, person.lastName);
        Console.WriteLine($"fullname = {fullName}");//fullname = Mahendrasingh Dhoni
        string greetings = formGreetings("hello", fullName);
        Console.WriteLine($"greetings={greetings}");//greetings=hello Mahendrasingh Dhoni


        /**/

        /*
        //dynamic vs var example
        dynamic y = 10;
        var x = 10;
        //x = "hello";//ERR
        y = "wow";
        Console.WriteLine($"x={x},y={y}");
        */


        /*//Expression Example 1
        Expression<Func<int, bool>> expr = num => num > 5;
        Console.WriteLine(expr.Body); // Output: (num > 5)
        Console.WriteLine(expr.Compile()(60));
        Console.WriteLine(expr.Compile()(3));


        //Expression Example 2
        // Define a parameter expression for 'x'
        ParameterExpression param = Expression.Parameter(typeof(int), "x");

        // Define an expression for 'x + 1'
        Expression add = Expression.Add(param, Expression.Constant(1));

        // Create the lambda expression 'x => x + 1'
        Expression<Func<int, int>> lambda = Expression.Lambda<Func<int, int>>(add, param);

        // Compile the expression to a delegate
        Func<int, int> compiled = lambda.Compile();

        // Execute the compiled expression
        int result = compiled(5);

        Console.WriteLine(result); // Output: 6
        Console.WriteLine(lambda.Body);

        //Expression example 3
        // Define parameters 'x' and 'y'
        ParameterExpression paramX = Expression.Parameter(typeof(int), "x");
        ParameterExpression paramY = Expression.Parameter(typeof(int), "y");

        // Define expressions for 'x * 2' and 'x * 2 - y'
        Expression multiply = Expression.Multiply(paramX, Expression.Constant(2));
        Expression subtract = Expression.Subtract(multiply, paramY);

        // Create the lambda expression 'x, y => x * 2 - y'
        Expression<Func<int, int, int>> lambdaSubtract = Expression.Lambda<Func<int, int, int>>(subtract, paramX, paramY);

        // Compile and execute the expression
        Func<int, int, int> compiledSubtract = lambdaSubtract.Compile();
        int resultSubtract = compiledSubtract(5, 3);

        Console.WriteLine(resultSubtract); // Output: 7
        Console.WriteLine(lambdaSubtract.Body);*/




        /*//Linq
        int[] numbers = { 20, 10, 40, 10, 30, 50, 3, 2, 5, 6 };
        Action<int[]> printNums = (nums) => { foreach (var n in nums) { Console.Write($"{n} "); } };

        var querySyntax = from num in numbers where num > 5 select num;
        Console.Write($"{Environment.NewLine}Array num > 5 query:"); printNums(querySyntax.ToArray());

        var methodSyntax = numbers.Where(num => num > 5);
        Console.Write($"{Environment.NewLine}Array num > 5 method:"); printNums(methodSyntax.ToArray());

        var divideBy20Numbers = numbers.Where(n => n % 20 == 0).ToArray();
        Console.Write($"{Environment.NewLine}Array n % 20 == 0:"); printNums(divideBy20Numbers);

        var sorted = from num in numbers orderby num select num;
        Console.Write($"{Environment.NewLine}Array sorted by query:"); printNums(sorted.ToArray());

        var sorted2 = numbers.OrderBy(num => num);
        Console.Write($"{Environment.NewLine}Array sorted by method:"); printNums(sorted2.ToArray());

        var xmlString = "<Root><Number>10</Number><Number>20</Number></Root>";
        XElement xml = XElement.Parse(xmlString);//XElement xml = XElement.Load("numbers.xml");
        var nodesNumber = from node in xml.Elements("Number") select int.Parse(node.Value);
        Console.Write($"{Environment.NewLine}Array from xml query:"); printNums(nodesNumber.ToArray());

        var nodesNumber2 = xml.Elements("Number").Select(node => int.Parse(node.Value));
        Console.Write($"{Environment.NewLine}Array from xml method:"); printNums(nodesNumber2.ToArray());*/




        /*//Async ops
        Console.WriteLine("Testing async / await");
        TestFetchDataAsync();
        TestFetchDataAsync2();
        Console.WriteLine("After tested asyncs");*/



        /* //Parallel tasks
         Parallel.For(0, 10, i =>
         {
             Console.WriteLine(i);
         });*/

        /*
         1,00,00,000 people who will get Rs.50,000 from gov 

         to check who got 50,000 early, to remove from the list
         
           
        10000 times 1000 people, 7

        10000/7
         */

    }


}


1. Extension Methods
   - Definition: Extension methods allow you 
   to add new methods to existing class objects 
   without modifying them. 
   They are defined as static methods 
   but are called on instances of the extended class.

  - Definition: Extension methods allow you 
  to add new methods to existing types without modifying them. 
  They are defined as static methods but are called on instances of the extended type.
   - Syntax: 
     ```csharp
     public static class MyExtensions
     {
         public static int WordCount(this string str)
         {
             return str.Split(' ').Length;
         }
     }
     ```
   - Usage: 
     ```csharp
     string text = "Hello World";
     int count = text.WordCount(); // Calls the extension method
     ```

2. Anonymous Types
   - Definition: Anonymous types provide a way 
   to create a new type without defining it explicitly. 
   They are useful for creating objects 
   with multiple properties without needing to define a formal class.
   - Syntax: 
     ```csharp
     var person = new { Name = "John", Age = 30 };
     ```
   - Usage: 
     ```csharp
     Console.WriteLine(person.Name); // Output: John
     ```

3. Var and Dynamic
   - Var: 
     - Definition: `var` is a statically typed variable where the type is inferred at compile time.
     - Usage: 
       ```csharp
       var number = 5; // int
       var name = "Alice"; // string
       ```
   - Dynamic:
     - Definition: `dynamic` bypasses compile-time type checking. 
     The type is resolved at runtime, 
     making it more flexible but less safe.
     - Usage: 
       ```csharp
       dynamic obj = "Hello";
       Console.WriteLine(obj.Length); // Works
       obj = 5;
       Console.WriteLine(obj.Length); // Runtime error
       ```

4. Delegates
   - Definition: Delegates are types that represent references to methods. 
   They are used to pass methods as arguments to other methods.
   - Syntax:
     ```csharp
     public delegate int MathOperation(int a, int b);
     ```
   - Usage:
     ```csharp
     MathOperation add = (a, b) => a + b;
     int result = add(3, 4); // 7
     ```

5. Events
   - Definition: Events are a way for a class 
   to notify other classes when something happens. 
   They are based on delegates.
   - Syntax:
     ```csharp
     public event EventHandler SomethingHappened;
     ```
   - Usage:
     ```csharp
     public void TriggerEvent()
     {
         SomethingHappened?.Invoke(this, EventArgs.Empty);
     }
     ```

6. Anonymous Methods
   - Definition: Anonymous methods are inline methods 
   that can be defined using the `delegate` keyword. 
   They are useful when the method implementation is short and used only once.
   - Syntax:
     ```csharp
     delegate void Print(string message);
     Print print = delegate(string message) { Console.WriteLine(message); };
     print("Hello World");
     ```

7. Lambda Expressions
   - Definition: Lambda expressions are a concise way to write anonymous methods. They are commonly used with LINQ.
   - Syntax:
     ```csharp
     Func<int, int, int> add = (x, y) => x + y;
     ```
   - Usage:
     ```csharp
     int result = add(3, 4); // 7
     ```

8. Expression Trees
   - Definition: 
    Expression trees represent code as data, 
    allowing you to examine and modify the code in a tree-like structure. 
    They are mainly used in LINQ to SQL or LINQ to Entities.
   - Syntax:
     ```csharp
     Expression<Func<int, bool>> expr = num => num > 5;
     ```
   - Usage:
     ```csharp
     Console.WriteLine(expr.Body); // Output: (num > 5)
     ```

9. Async/Await and Task Parallel Library (TPL) Basics
   - Introduction to Asynchronous Programming:
     - Asynchronous programming allows you to perform tasks 
     without blocking the main thread, 
     making applications more responsive.
   - Async and Await Keywords:
     - `async` marks a method as asynchronous, and `await` is used 
     to asynchronously wait for a task to complete.
     ```csharp
     public async Task<int> FetchDataAsync()
     {
         await Task.Delay(1000); // Simulate async work
         return 42;
     }
     ```
   - Task and Task<T>:
     - `Task` represents an asynchronous operation, while `Task<T>` returns a value.
     - Example:
     ```csharp
     Task<int> task = FetchDataAsync();
     int result = await task;
     ```
   - Handling Exceptions in Asynchronous Methods:
     - Use `try-catch` blocks to handle exceptions in asynchronous methods.
     ```csharp
     try
     {
         int result = await FetchDataAsync();
     }
     catch (Exception ex)
     {
         Console.WriteLine(ex.Message);
     }
     ```
   - Parallel Programming with TPL:
     - TPL provides a higher-level abstraction for parallelism using `Task` and `Parallel` classes.
     ```csharp
     Parallel.For(0, 10, i =>
     {
         Console.WriteLine(i);
     });
     ```

10. LINQ Usage Basics
   - LINQ Query Syntax and Method Syntax:
     - Query syntax is SQL-like and easier for beginners, while method syntax is more flexible and powerful.
     ```csharp
     var querySyntax = from num in numbers where num > 5 select num;
     var methodSyntax = numbers.Where(num => num > 5);
     ```
   - LINQ Operators:
     - Common operators include `Select`, `Where`, `GroupBy`, `Join`, etc.
     ```csharp
     var results = numbers.Where(num => num > 5).Select(num => num * 2);
     ```
   - LINQ to Objects:
     - LINQ to Objects works with in-memory collections like arrays or lists.
     ```csharp
     var evenNumbers = numbers.Where(n => n % 2 == 0);
     ```
   - LINQ to XML:
     - LINQ to XML allows you to query and manipulate XML data.
     ```csharp
     XElement xml = XElement.Load("file.xml");
     var nodes = from node in xml.Elements("Item") select node;
     ```
   - LINQ to SQL:
     - LINQ to SQL is used to query a SQL database using LINQ.
     ```csharp
     var query = from c in dbContext.Customers where c.City == "London" select c;
     ```



