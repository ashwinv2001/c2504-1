Real-world healthcare scenario 
where a clinic needs 
    to manage patient data, 
    schedule appointments, 
    and handle billing. 

This scenario can be broken down 
into multiple components that adhere 
to SOLID design principles.

Scenario: Clinic Management System

Context:
A clinic needs a system to manage:
1. Patient Information: 
    Storing and retrieving patient records, 
    including medical history.
2. Appointments: 
    Scheduling, rescheduling, and 
    canceling patient appointments with doctors.
3. Billing: 
    Generating invoices for patient services, 
    processing payments, and 
    managing billing history.

Domain-Specific Use Case

1. Patient Registration and Management:
   - Requirement: 
    The clinic needs to store and manage patient information, 
    including name, 
    contact details, 
    medical history, and 
    current medications.
   - Implementation:
     - Classes: 
        `Patient`, `PatientRepository`, and `PatientService`.
     - Interfaces: 
        `IPatientRepository`, `IPatientService`.

2. Appointment Scheduling:
   - Requirement: 
    Patients should be able 
        to schedule, reschedule, and cancel appointments. 
        The system should ensure 
        that doctors are not double-booked and 
        should also send reminders.
   - Implementation:
     - Classes: 
        `Appointment`, `AppointmentRepository`, `AppointmentService`.
     - Interfaces: 
        `IAppointmentRepository`, `IAppointmentService`.

3. Billing and Payment:
   - Requirement: 
        The clinic needs to generate bills 
        for services provided to patients. 
        It should handle different payment methods, 
        including credit cards, insurance, and cash.
   - Implementation:
     - Classes: 
        `Billing`, `Invoice`, `Payment`, 
        `BillingRepository`, `PaymentProcessor`.
     - Interfaces: 
        `IBillingRepository`, 
        `IPaymentProcessor`.

Applying SOLID Principles

1. Single Responsibility Principle (SRP)
- Patient Class: 
    Handles only the patient-related data like personal information and 
    medical history.
- Appointment Class: 
    Manages appointment-related data 
    such as appointment date, doctor, and patient.
- Billing Class: 
    Deals only with generating and storing billing information.

2. Open/Closed Principle (OCP)
- The system can be extended with additional features 
    (e.g., adding online payment gateways or 
    integrating third-party appointment reminder services) 
    without modifying the existing classes.

3. Liskov Substitution Principle (LSP)
- `IPaymentProcessor` could be implemented 
by different payment processors 
(e.g., `CreditCardProcessor`, `InsuranceProcessor`), and 
they can be used interchangeably wherever the `IPaymentProcessor` 
interface is expected.

4. Interface Segregation Principle (ISP)
- Each service or repository interface is focused 
    on specific tasks, like `IPatientRepository` 
    for patient data, `IAppointmentService` 
    for appointment-related logic, and `IBillingRepository` 
    for billing tasks.

5. Dependency Inversion Principle (DIP)
- High-level classes like `PatientService`, `AppointmentService`, 
and `BillingService` depend on abstractions (interfaces) 
rather than concrete implementations, 
enabling flexibility and easier testing.

C# Implementation

//1. Patient Management
//```csharp
public interface IPatientRepository
{
    void AddPatient(Patient patient);
    Patient GetPatient(int id);
    IEnumerable<Patient> GetAllPatients();
}

public class Patient
{
    public int PatientID { get; private set; }
    public string Name { get; set; }
    public string MedicalHistory { get; set; }

    public Patient(int patientID, string name, string medicalHistory)
    {
        PatientID = patientID;
        Name = name;
        MedicalHistory = medicalHistory;
    }
}

public class PatientRepository : IPatientRepository
{
    private readonly List<Patient> _patients = new();

    public void AddPatient(Patient patient)
    {
        _patients.Add(patient);
    }

    public Patient GetPatient(int id)
    {
        return _patients.FirstOrDefault(p => p.PatientID == id);
    }

    public IEnumerable<Patient> GetAllPatients()
    {
        return _patients;
    }
}
//```

//2. Appointment Scheduling
//```csharp
public interface IAppointmentRepository
{
    void ScheduleAppointment(Appointment appointment);
    void CancelAppointment(int appointmentID);
    IEnumerable<Appointment> GetAppointmentsByPatient(int patientID);
}

public class Appointment
{
    public int AppointmentID { get; private set; }
    public int PatientID { get; private set; }
    public DateTime Date { get; set; }
    public string Doctor { get; set; }

    public Appointment(int appointmentID, int patientID, DateTime date, string doctor)
    {
        AppointmentID = appointmentID;
        PatientID = patientID;
        Date = date;
        Doctor = doctor;
    }
}

public class AppointmentRepository : IAppointmentRepository
{
    private readonly List<Appointment> _appointments = new();

    public void ScheduleAppointment(Appointment appointment)
    {
        _appointments.Add(appointment);
    }

    public void CancelAppointment(int appointmentID)
    {
        var appointment = _appointments.FirstOrDefault(a => a.AppointmentID == appointmentID);
        if (appointment != null)
        {
            _appointments.Remove(appointment);
        }
    }

    public IEnumerable<Appointment> GetAppointmentsByPatient(int patientID)
    {
        return _appointments.Where(a => a.PatientID == patientID);
    }
}
//```

//3. Billing and Payment Processing
//```csharp
public interface IBillingRepository
{
    void GenerateInvoice(Invoice invoice);
    Invoice GetInvoice(int invoiceID);
}

public interface IPaymentProcessor
{
    void ProcessPayment(Payment payment);
}

public class Invoice
{
    public int InvoiceID { get; private set; }
    public int PatientID { get; private set; }
    public decimal Amount { get; private set; }

    public Invoice(int invoiceID, int patientID, decimal amount)
    {
        InvoiceID = invoiceID;
        PatientID = patientID;
        Amount = amount;
    }
}

public class Payment
{
    public int PaymentID { get; private set; }
    public int InvoiceID { get; private set; }
    public decimal Amount { get; private set; }
    public string Method { get; private set; }  // e.g., Credit Card, Insurance

    public Payment(int paymentID, int invoiceID, decimal amount, string method)
    {
        PaymentID = paymentID;
        InvoiceID = invoiceID;
        Amount = amount;
        Method = method;
    }
}

public class BillingRepository : IBillingRepository
{
    private readonly List<Invoice> _invoices = new();

    public void GenerateInvoice(Invoice invoice)
    {
        _invoices.Add(invoice);
    }

    public Invoice GetInvoice(int invoiceID)
    {
        return _invoices.FirstOrDefault(i => i.InvoiceID == invoiceID);
    }
}

public class CreditCardProcessor : IPaymentProcessor
{
    public void ProcessPayment(Payment payment)
    {
        // Process credit card payment logic
    }
}

public class InsuranceProcessor : IPaymentProcessor
{
    public void ProcessPayment(Payment payment)
    {
        // Process insurance payment logic
    }
}
//```

//4. Service Layer
//```csharp
public class PatientService
{
    private readonly IPatientRepository _patientRepository;

    public PatientService(IPatientRepository patientRepository)
    {
        _patientRepository = patientRepository;
    }

    public void RegisterPatient(int patientID, string name, string medicalHistory)
    {
        var patient = new Patient(patientID, name, medicalHistory);
        _patientRepository.AddPatient(patient);
    }

    public Patient GetPatient(int patientID)
    {
        return _patientRepository.GetPatient(patientID);
    }
}

public class AppointmentService
{
    private readonly IAppointmentRepository _appointmentRepository;

    public AppointmentService(IAppointmentRepository appointmentRepository)
    {
        _appointmentRepository = appointmentRepository;
    }

    public void ScheduleAppointment(int appointmentID, int patientID, DateTime date, string doctor)
    {
        var appointment = new Appointment(appointmentID, patientID, date, doctor);
        _appointmentRepository.ScheduleAppointment(appointment);
    }

    public void CancelAppointment(int appointmentID)
    {
        _appointmentRepository.CancelAppointment(appointmentID);
    }
}

public class BillingService
{
    private readonly IBillingRepository _billingRepository;
    private readonly IPaymentProcessor _paymentProcessor;

    public BillingService(IBillingRepository billingRepository, IPaymentProcessor paymentProcessor)
    {
        _billingRepository = billingRepository;
        _paymentProcessor = paymentProcessor;
    }

    public void GenerateInvoice(int invoiceID, int patientID, decimal amount)
    {
        var invoice = new Invoice(invoiceID, patientID, amount);
        _billingRepository.GenerateInvoice(invoice);
    }

    public void ProcessPayment(int paymentID, int invoiceID, decimal amount, string method)
    {
        var payment = new Payment(paymentID, invoiceID, amount, method);
        _paymentProcessor.ProcessPayment(payment);
    }
}
//```

Summary
In this scenario:
- PatientService manages patient-related operations.
- AppointmentService handles scheduling, canceling, and 
    retrieving appointments.
- BillingService deals with billing and payment processing.

Each service interacts with its respective repositories and 
processors via interfaces, ensuring 
that the system is easily extendable, testable, and maintainable. 

The system adheres to all SOLID principles, 
providing a robust and scalable design 
for a clinic's management system.

Usage
```
// Example of using the full Clinic Management System
var patientRepository = new PatientRepository();
var appointmentRepository = new AppointmentRepository();
var billingRepository = new BillingRepository();
var paymentProcessor = new CreditCardProcessor();

var patientService = new PatientService(patientRepository);
var appointmentService = new AppointmentService(appointmentRepository);
var billingService = new BillingService(billingRepository, paymentProcessor);
var doctorService = new DoctorService(patientRepository);

// Register a patient
patientService.RegisterPatient(1, "Jane Doe", "Hypertension, Allergic to Penicillin");

// Schedule an appointment
appointmentService.ScheduleAppointment(1, 1, DateTime.Now.AddDays(2), "Dr. Johnson");

// Generate an invoice and process payment
billingService.GenerateInvoice(1, 1, 150.00m);
billingService.ProcessPayment(1, 1, 150.00m, "Credit Card");

// Doctor reviews the patient's medical history
doctorService.ReviewPatientHistory(1);
```