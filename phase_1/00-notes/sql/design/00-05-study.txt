Table: (OrderID, ProductID, ProductName, Quantity, OrderDate)
Candidate Key: (OrderID, ProductID)

Partial Dependency: 
    If ProductName is dependent only on ProductID and 
    not on the entire composite key (OrderID, ProductID).

Removing Partial Dependency
    To remove partial dependencies, you 
    split the table into two or more tables 
    so that non, prime attributes 
    are fully dependent on the whole candidate key.

    Step, by, Step Process:
    Identify the partial dependency: 
        ProductName depends only on ProductID.
    Decompose the table to remove the partial dependency.

Full Functional Dependency
    A full functional dependency means 
    that an attribute is functionally dependent on 
    the entire composite key, 
    not just part of it.
    Example: 
        In the Order table:
        Quantity is fully dependent on the composite key (OrderID, ProductID).

Difference Between Partial and Transitive Dependency
Partial Dependency:
    Occurs in tables with a composite key.
    A non, prime attribute is dependent on 
    only part of the composite key.
    Example: In the table 
    (OrderID, ProductID, ProductName, OrderDate), 
    ProductName is partially dependent on ProductID.

Transitive Dependency:
    Occurs when a non, prime attribute depends on 
    another non, prime attribute 
    rather than depending directly on the primary key.
    Example: 
        In a table (StudentID, CourseID, InstructorName, InstructorOffice):
            If InstructorOffice depends on InstructorName, and 
            InstructorName depends on the composite key (StudentID, CourseID), 
            then InstructorOffice is transitively dependent on the composite key.

Key Points:
    Partial Dependency: 
        Non, prime attribute depends on part of a composite key.
    Transitive Dependency: 
        Non, prime attribute depends on another non, prime attribute, 
        which in turn depends on the primary key.

Dev Communitiy 
A direct comparison between 
    2NF and 3NF is 
    somewhat misleading as it is not an apples, to, apples comparison. 
    3NF is a more sophisticated case of 2NF, and thus, 
    it wouldnâ€™t be fair to compare these normal forms. 
    
    The choice of normalization depends on your data and end goal. 
    If you aim to reduce the main redundant data, choose 2NF. 
    However, if you are looking to ensure referential integrity, 
    3NF is a better choice.

Geeks:
    S.NO.	2NF(Second Normal Form)	                                        3NF(Third Normal Form)
    1.	It is already in 1NF.	                                            It is already in 1NF as well as in 2NF also.
    2.	In 2NF non, prime attributes are allowed 
        to be functionally dependent on non, prime attributes.	            In 3NF non, prime attributes are only allowed to be functionally dependent on Super key of relation.
    3.	No partial functional dependency of non, prime attributes 
        are on any proper subset of candidate key is allowed.	
                                                                            No transitive functional dependency of non, prime attributes on any super key is allowed. .
    4.	Stronger normal form than 1NF but lesser than 3NF	                Stronger normal form than 1NF and 2NF.
    5.	It eliminates repeating groups in relation.	                        It virtually eliminates all the redundancies.
    6.	The goal of the second normal form is to eliminate redundant data.	The goal of the third normal form is to ensure referential integrity.


        
      