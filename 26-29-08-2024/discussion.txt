Topics covered:
    - programming fundamentals 
    - sql server 
    - intro to web / software engg 
    - dotnet architechture 
    - oops - fundamentals
        - nested class, static class 
        - has-a, is-a 
        - polimorphism - overloading 
        - this, base keywords 
        - method types 
            static, intance methods 
        - method argument types 
            ref, out, tuple 
    - inheritance - abstract, interface , partial class
        - types of inheritance 
        - runtime polimorphism 
    - indexer, exception, attributes, enum  
    - logging 
    - arrays and strings 

Today:
    - Anonymous Type, Delegates, Events and Lambda

    delegate 
        C# frameworks 
            event models are based on delegate
        what is delegate? 
            like C language function pointer
            "reference to function"

=======================
1. what is object?
    object is blueprint 
    object is composite type variable 
    object is the reference type 
    object memory will be crated at "heap"
2. what is reference variable of the object? 
3. when will you get the reference variable?
4. what is garbage collector? 
    gc will collects no longer referenced objects.
5. what is local variables?
        - function scope variables and arguments of the function 
    when memory will be allocatted the variable and deallocated?
        - alloc: inside the function 
        - dealloc: returning out of the function 
        [] "stack mem" will be delloc'd automatically 
6. signature of the Add functionality of the Complex object. 
        Add is the object member function of the Complex object 
    syntax: 
        Complex Add(Complex other)
    usage:a, b are the two complex numbers 
        Complex c = a.Add(b);
            what is a? 
                calling object 
            what is b? 
                argument object 
            Here,
                object 'a' calls the function "Add" 
                and "Add" takes the argument 'b'
            Add function returns 'sum' complex number 

class Complex 
{
    public double R{get; set;}
    public double I{get; set;}
    public Complex(double _R, double _I)
    {
        this.R = _R;
        this.I = _I;
    }
    public Complex Add(Complex other)
    {
        Complex third = new Complex();
        third.R = this.R + other.R;
        third.I = this.I + other.R;
        return third;
    }
    public override string ToString()
    {
        return $"({this.R} + i{this.I})";
    }
}

Usage:
    Complex a = new Complex(2,3); //2+i3
    Complex b = new Complex(5,7); //5+i7
    Complex c = a.Add(b);         //7+i10
    Console.WriteLine($"{a} + {b} = {c}");


Full Code: 
        class Complex
        {
            public double R { get; set; }
            public double I { get; set; }
            public Complex(double _R, double _I)
            {
                this.R = _R;
                this.I = _I;
            }
            public Complex() : this(0, 0) { }
            public Complex Add(Complex other)
            {
                Complex third = new Complex();
                third.R = this.R + other.R;
                third.I = this.I + other.I;
                return third;
            }
            public override string ToString()
            {
                return $"({this.R} + i{this.I})";
            }
        }
        static void Main()
        {
            Complex a = new Complex(2, 3); //2+i3
            Complex b = new Complex(5, 7); //5+i7
            Complex c = a.Add(b);         //7+i10
            Console.WriteLine($"{a} + {b} = {c}");
        }
    }
7. signature of the Subtract functionality of the Complex object. 
    syntax: 
        Complex Subtract(Complex other)
    usage: a, b are complex objects 
        Complex c = a.Subtract(b);
8. signature of the IsGreater functionality of the Rectangle object
    Note: compare by area of the rectangle 
    syntax: 
        bool IsGreater(Rectangle other)
    definition:
        //...
        public bool IsGreater(Rectangle other)
        {
            return this.FindArea() > other.FindArea();
        } 
        //...
    usage: a, b are rectangles
        bool isGreater = a.IsGreater(b);
9. signature of the IsEqual functionality of Student object 
    Note: compare students total marks, where 'Total' is the property 
    syntax: 
        bool IsEqual(Student other)
    definition:
        class Student
        {
            public double Total{get; set;}
            //...
            public bool IsEqual(Student other)
            {
                return this.Total == other.Total;
            }
        }
    usage: a, b are students
        bool isEqual = a.IsEqual(b);

10. usage: 
    Console.WriteLine("Hello World");
    Here, 
        class "Console" calls function "WriteLine"
        WriteLine 
            - takes string "Hello World" as arg 
            - and it prints that arg in console 
    //Prints Hello World 


=======================

Delegate is the reference to the function 
    - Delegate will hold the signature of the function to be held 

    Example for delegate type:
        delegate void DWriteLine(string str);
    Here, 
        delegate type named "DWriteLine" is created. 
        The signature of the delegate is 
            - returns void 
            - takes one arg 
                first arg : string 
    Now, 
        reference variable of delegate named "DWriteLine"
        may refer the functions whose signature must match to delegate signature 
    Implies ie 
        We can refer any function matching the delegate signature 
    
Example 1: Usage
    "DWriteLine wr = Console.WriteLine;"
    Here, 
        wr refers 'Console.WriteLine'
        so with 'wr' we can call the 'Console.WriteLine'
Example 2: Usage
    Suppose,
        We have the functions 
            static void Print(string a)
            static void PrintLettersOneByOne(string x)
            static void PrintLettersCount(string x)
    "DWriteLine rPrint = Print;" 
    Here, 
        with rPrint we may call Print because Print is referred by rPrint.
Example 3: Usage (multi casting)
     DWriteLine rPrintLettersOneByOne = PrintLettersOneByOne; //assigning the reference
     rPrintLettersOneByOne += PrintLettersCount; //adding one extra reference

     Here, 
        rPrintLettersOneByOne refers two functions "PrintLettersOneByOne" and 
            "PrintLettersCount"
        So, with rPrintLettersOneByOne, we can call two functions at a time.
Example 4: Usage (remove reference )
    //To remove one of the functions referred by the delegate reference.
    rPrintLettersOneByOne -= PrintLettersOneByOne;
    Here, reference of "PrintLettersOneByOne" is removed from the "rPrintLettersOneByOne"

Program:
    
    delegate void DWriteLine(string str);
    internal class Programs
    {
        static void Print(string a)
        {
            Console.WriteLine(a);
        }
        static void Main()
        {
            //Console.WriteLine("Hello World!!!");
            //Console.WriteLine("Hi Ashna!");
            //Console.WriteLine("Hi Collin!");

            DWriteLine wr = Console.WriteLine; //DWriteLine wr = new DWriteLine(Console.WriteLine);
            wr("Hello World!!!");
            wr("Hi Ashna!");
            wr("Hi Collin!");
            

            //DWriteLine rl = Console.ReadLine; //why? //signature of "Console.ReadLine" and "DWriteLine" are not matched
            DWriteLine rPrint = Print;//new DWriteLine(Print)
            rPrint("I am printing...");

            DWriteLine rPrintLettersOneByOne = PrintLettersOneByOne;
            rPrintLettersOneByOne += PrintLettersCount;//multi casting //delegate var refers many functions at a time

            rPrintLettersOneByOne("Obj");

            rPrintLettersOneByOne -= PrintLettersOneByOne;
            rPrintLettersOneByOne("Oriented");
        }

        static void PrintLettersOneByOne(string x)
        {
            foreach(var letter in x)
            {
                Console.WriteLine(letter);
            }
        }
        static void PrintLettersCount(string x) //Note: Dont use Length function 
        {
            int c = 0;
            foreach (var letter in x)
            {
                c++;
            }
            Console.WriteLine($"Count is {c}");
        }
    }


Higher order function:
    The function takes 
        one of the arguments as function 
    or 
    The function returns 
        another function 

Example Program 2: for delegate
public delegate double DCalc(double a, double b);

public class Calculator
{
    public static double Add(double x, double y)
    {
        return x + y;
    }
    
}

internal class Programs
{

    static void Main()
    {
        DCalc rCalc = Calculator.Add;
        Console.WriteLine("sum = {0}", rCalc(10, 20));//30

        
    }
   
}


Example Program for 'callback function':
    The task function which takes input data and callback function as another argument .
    The task function will calls the callback function after task completion. 

public delegate double DCalc(double a, double b);
public delegate void DOnAfterSubtract();
public class Calculator
{
    public static double Add(double x, double y)
    {
        return x + y;
    }
    public static double Subtract(double x, double y, DOnAfterSubtract OnAfterSubtract = null)
    //OnAfterSubtract is the callback function
    {
        double d = x - y;
        if (OnAfterSubtract != null)
        {
            OnAfterSubtract();
        }
        
        return d;
    }
}

internal class Programs
{
    
    static void Main()
    {
        DCalc rCalc = Calculator.Add;
        Console.WriteLine("sum = {0}",rCalc(10, 20));//30

        double d1 = Calculator.Subtract(20, 15, OnAfterSubtract1);
        Console.WriteLine($"20-15={d1}");//5
        double d2 = Calculator.Subtract(20, 3, OnAfterSubtract2);
        Console.WriteLine($"20-3={d2}");//17
        double d3 = Calculator.Subtract(15, 3);
        Console.WriteLine($"15-3={d3}");//12
    }        
    static void OnAfterSubtract1()
    {
        Console.WriteLine("20, 15 Subtraction completed.");
    }
    static void OnAfterSubtract2()
    {
        Console.WriteLine("20, 3 Subtraction completed.");
    }
}

Event handling mechanism in C#:
    what is event?
        event is the delegate variable.
            to represent the task is completing or to do the task 
            to happen any activtity 
        event is the special approach / mechanism in .net to handle the events.
        event is the "delegate" design pattern  
    mechanism?
        1. define delegate 
        2. define event of type delegate for the task function object 
        3. raise the event inside the object's task function 
        4. define the event handler in user class 
        5. attach the event handler of task function object 
    why event?
        "message passing" 
            - one of the OOPs principle 
            - "message passing" is the mechanism
                in which two objects will talk each other 
                calling object 
                    will handle the event 
                called object 
                    will generate event 

Program for event defining and handling:

public delegate double DCalc(double a, double b);//1 define delegate
public delegate void DOnAfterSubtract();
public class Calculator
{
    public event DOnAfterSubtract OnAfterSubtract;//2. event is defined // delegate ref variable is the event
    //event is wrapper of the delegate
    public double Subtract(double x, double y)
    //OnAfterSubtract is the callback function
    {
        double d = x - y;
        if (OnAfterSubtract != null)
        {
            OnAfterSubtract();//3. event generated
        }
        
        return d;
    }
}

internal class Programs
{
    
    static void Main()
    {
        Calculator calc1 = new Calculator();
        calc1.OnAfterSubtract += OnAfterSubtract1;//5. Attach the event handler of calc1's OnAfterSubtract
        double d1 = calc1.Subtract(20, 15);
        Console.WriteLine($"20-15={d1}");//5


        Calculator calc2 = new Calculator();
        calc2.OnAfterSubtract += OnAfterSubtract2;//5. Attach the event handler of calc2's OnAfterSubtract
        double d2 = calc2.Subtract(20, 3);
        Console.WriteLine($"20-3={d2}");//17


        Calculator calc3 = new Calculator();
        double d3 = calc3.Subtract(15, 3);
        Console.WriteLine($"15-3={d3}");//12
    }        
    static void OnAfterSubtract1() //4. defining event handler of object calc1's event OnAfterSubtract
    {
        Console.WriteLine("20, 15 Subtraction completed.");
    }
    static void OnAfterSubtract2() //4. defining event handler of object calc2's event OnAfterSubtract
    {
        Console.WriteLine("20, 3 Subtraction completed.");
    }
}


Tomorrow:
    - Anonymous Type, Lambda, Linq, Extension Method 