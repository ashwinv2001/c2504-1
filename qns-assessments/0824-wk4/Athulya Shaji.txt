Problem Statement: Hospital Medication Management
- Define a class: `HospitalMedication` with the following properties:
- `HospitalID` (integer)
- `DoctorName` (string)
- `Medication` (string)
- `Dosage` (double, in milligrams)
- Tasks:
1. Data Entry:
- Read N `hospitalMedications` from the keyboard.
2. Find Maximum Dosage by a Specific Doctor:
- For a given doctor's name, display the medication with the highest dosage prescribed by them.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
3. Find Second Least Dosage Overall:
- Display the medication with the second least dosage across all hospitals.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
4. Sort by Medication Name:
- Implement and call your own sorting algorithm.
Dont use built-in C# sorting or LINQ.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssessementFourthWeek
{
    public class HospitalMedication
    {
        public int HospitalID { get; set; }
        public string DoctorName { get; set; }
        public string Medication { get; set; }
        public double Dosage { get; set; }
    }

    public class ReadHosptitalMedication
    {
        public HospitalMedication[] medications;

        public ReadHosptitalMedication(int N)
        {
            medications = new HospitalMedication[N];
        }

        public void ReadMedications()
        {
            for (int i = 0; i < medications.Length; i++)
            {
                medications[i] = new HospitalMedication();

                Console.Write("Enter Hospital ID: ");
                medications[i].HospitalID = int.Parse(Console.ReadLine());

                Console.Write("Enter Doctor Name: ");
                medications[i].DoctorName = Console.ReadLine();

                Console.Write("Enter Medication: ");
                medications[i].Medication = Console.ReadLine();

                Console.Write("Enter Dosage (mg): ");
                medications[i].Dosage = double.Parse(Console.ReadLine());
            }
        }

        public HospitalMedication FindHighestDosageByDoctor(string doctorName)
        {
            HospitalMedication maxDosageMedication = null;
            double maxDosage = double.MinValue;

            foreach (var medication in medications)
            {
                if (medication.DoctorName == doctorName && medication.Dosage > maxDosage)
                {
                    maxDosage = medication.Dosage;
                    maxDosageMedication = medication;
                }
            }

            return maxDosageMedication;
        }

        public HospitalMedication FindSecondLeastDosage()
        {
            HospitalMedication leastDosageMedication = null;
            HospitalMedication secondLeastDosage = null;

            foreach (var medication in medications)
            {
                if (leastDosageMedication == null || medication.Dosage < leastDosageMedication.Dosage)
                {
                    secondLeastDosage = leastDosageMedication;
                    leastDosageMedication = medication;
                }
                else if (secondLeastDosage == null || medication.Dosage < secondLeastDosage.Dosage)
                {
                    secondLeastDosage = medication;
                }
            }

            return secondLeastDosage;
        }

        public void SortMedicationsByName()
        {
            // Implementing selection sorting algorithm here
            for (int i = 0; i < medications.Length - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < medications.Length; j++)
                {
                    if (string.Compare(medications[j].Medication, medications[minIndex].Medication, StringComparison.OrdinalIgnoreCase) < 0)
                    {
                        minIndex = j;
                    }
                }

                // Swap elements
                HospitalMedication temp = medications[i];
                medications[i] = medications[minIndex];
                medications[minIndex] = temp;
            }
        }
    }

    public class Program
    {
        public static void Main()
        {
            Console.Write("Enter the number of hospital medications: ");
            int N = int.Parse(Console.ReadLine());

            ReadHosptitalMedication manager = new ReadHosptitalMedication(N);
            manager.ReadMedications();
            Console.WriteLine("Enter Doctor name:");
            string doctorName = Console.ReadkLine();
            HospitalMedication highestDosageMedication = manager.FindHighestDosageByDoctor(doctorName);
            Console.WriteLine("Medication with highest dosage:");
            Console.WriteLine($"Medication: {highestDosageMedication.Medication}");
            Console.WriteLine($"Dosage: {highestDosageMedication.Dosage} mg");

            HospitalMedication secondLeastDosageMedication = manager.FindSecondLeastDosage();
            Console.WriteLine("Medication with second least dosage:");
            Console.WriteLine($"Medication: {secondLeastDosageMedication.Medication}");
            Console.WriteLine($"Dosage: {secondLeastDosageMedication.Dosage} mg");

            manager.SortMedicationsByName();
            Console.WriteLine("Sorted medications by name:");
            foreach (var medication in manager.medications)
            {
                Console.WriteLine($"Medication: {medication.Medication}, Dosage: {medication.Dosage} mg");
            }
        }
    }
}



===========================


Problem Statement: Advanced Inheritance and Interface in Patient Care System
- Define a base class: `CareProvider` with properties:
- `ProviderID` (integer), `ProviderName` (string)
- Method: `ProvideCare()` (virtual, void)
- Define an interface: `IEmergencyResponder` with the following method:
- `RespondToEmergency()` (void)
- Define a derived class: `Nurse` that inherits from `CareProvider` and implements `IEmergencyResponder`:
- Additional Property: `ShiftTiming` (string)
- Implement `ProvideCare()` to display care provided during the shift.
- Implement `RespondToEmergency()` to handle emergency situations.
- Define another derived class: `Doctor` that also inherits from `CareProvider` and implements `IEmergencyResponder`:
- Additional Property: `Specialization` (string)
- Implement `ProvideCare()` to display care based on specialization.
- Implement `RespondToEmergency()` to handle critical emergency situations.
- Tasks:
1. Care Management:
- Read details for N `careProviders` (both Nurses and Doctors).
2. Emergency Response:
- Implement a method to simulate an emergency and call `RespondToEmergency()` for each care provider.
3. Care Providing:
- Display details of care provided by each provider using the overridden `ProvideCare()` method.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssessementFourthWeek
{
    class CareProvider
    {
        public int ProviderID { get; set; }
        public string ProviderName { get; set; }

        public virtual void ProvideCare()
        {
            Console.WriteLine("Provide Care...");
        }
    }

    interface IEmergencyResponder
    {
        void RespondToEmergency();
    }

    class Nurse : CareProvider, IEmergencyResponder
    {
        public string ShiftTiming { get; set; }

        public override void ProvideCare()
        {
            Console.WriteLine($"Care provided during {ShiftTiming} shift.");
        }

        public void RespondToEmergency()
        {
            Console.WriteLine("Nurse is in emergency.");
        }
    }

    class Doctor : CareProvider, IEmergencyResponder
    {
        public string Specialization { get; set; }

        public override void ProvideCare()
        {
            Console.WriteLine($"Providing specialized care in {Specialization}.");
        }

        public void RespondToEmergency()
        {
            Console.WriteLine("Doctor is in critical emergency.");
        }
    }

    class PatientCareSystem
    {
        static void Main()
        {
            Console.WriteLine("Enter Number of Care providers : ");
            int N = int.Parse(Console.ReadLine()); // Number of care providers
            CareProvider[] careProviders = new CareProvider[N];

            // Reading details for care providers
            for (int i = 0; i < N; i++)
            {
                Console.WriteLine("Enter details for care provider " + (i + 1));
                Console.Write("Provider ID: ");
                int providerID = int.Parse(Console.ReadLine());
                Console.Write("Provider Name: ");
                string providerName = Console.ReadLine();
                Console.WriteLine("Nurse/Doctor :");
                string providerType = Console.ReadLine();

                if (providerType.ToLower() == "nurse") // Create a Nurse
                {
                    Console.Write("Shift Timing: ");
                    string shiftTiming = Console.ReadLine();
                    careProviders[i] = new Nurse { ProviderID = providerID, ProviderName = providerName, ShiftTiming = shiftTiming };
                }
                else // Create a Doctor
                {
                    Console.Write("Specialization: ");
                    string specialization = Console.ReadLine();
                    careProviders[i] = new Doctor { ProviderID = providerID, ProviderName = providerName, Specialization = specialization };
                }
            }

            // Simulating an emergency
            Console.WriteLine("\nEmergency has occurred!");
            foreach (CareProvider provider in careProviders)
            {
                if (provider is IEmergencyResponder responder)
                {
                    responder.RespondToEmergency();
                }
            }

            // Displaying care provided
            Console.WriteLine("\nCare provided by each provider:");
            foreach (CareProvider provider in careProviders)
            {
                provider.ProvideCare();
            }
        }
    }
}