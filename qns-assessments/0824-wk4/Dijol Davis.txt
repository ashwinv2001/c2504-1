Problem Statement: Hospital Medication Management
- Define a class: `HospitalMedication` with the following properties:
- `HospitalID` (integer)
- `DoctorName` (string)
- `Medication` (string)
- `Dosage` (double, in milligrams)
- Tasks:
1. Data Entry:
- Read N `hospitalMedications` from the keyboard.
2. Find Maximum Dosage by a Specific Doctor:
- For a given doctor's name, display the medication with the highest dosage prescribed by them.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
3. Find Second Least Dosage Overall:
- Display the medication with the second least dosage across all hospitals.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
4. Sort by Medication Name:
- Implement and call your own sorting algorithm.
Dont use built-in C# sorting or LINQ.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Lifetime;
using System.Text;
using System.Threading.Tasks;

namespace ExamQ1
{
    public class HospitalMedication
    {
        public int HospitalID { get; set; }

        public string DoctorName { get; set; }

        public string Medication { get; set; }

        public double Dosage { get; set; }

        public HospitalMedication(int hospitalID, string doctorName, string medication, double dosage)
        {
            HospitalID = hospitalID;
            DoctorName = doctorName;
            Medication = medication;
            Dosage = dosage;
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Enter the number of Hospital Medications:");

            int n = int.Parse(Console.ReadLine());

            HospitalMedication[] hospitalMedications = new HospitalMedication[n];

            for (int i = 0; i < n; i++)
            {
                Console.Write("Enter the HospitalID:");
                int hospitalID = int.Parse(Console.ReadLine());

                Console.Write("Enter the DoctorName:");
                string doctorName = Console.ReadLine();

                Console.Write("Enter the Medication:");
                string medication = Console.ReadLine();

                Console.Write("Enter the Dosage in milligrams:");
                double dosage = double.Parse(Console.ReadLine());

                hospitalMedications[i] = new HospitalMedication(hospitalID, doctorName, medication, dosage);


            }

            //Find Maximum Dosage by a Specific Doctor
            Console.WriteLine("------------------MAXIMUM DOSAGE BY A SPECIFIC DOCTOR--------------------------------------");


            Console.Write("Enter the Doctor name to find the maximum dosage of that doctor:");
            string doctorNameforMaxDosage = Console.ReadLine();

            HospitalMedication maxDosageMedication = FindMaxDosageByDoctor(hospitalMedications, doctorNameforMaxDosage);
            if (maxDosageMedication != null)
            {
                Console.WriteLine($"Medication with maximum dosage by {doctorNameforMaxDosage} with {maxDosageMedication.Medication},{maxDosageMedication.Dosage}milligram");
            }
            else
            {
                Console.WriteLine($"No medication found for {doctorNameforMaxDosage}");
            }

            //Find Second Least Dosage Overall:

            Console.WriteLine("--------------------------SECOND LEAST DOSAGE OVERALL---------------------------------------------");

            HospitalMedication secondLeastDosage = FindSecondLeastDosageOverall(hospitalMedications);

            if (secondLeastDosage != null)
            {
                Console.WriteLine($"Medication with second least dosage overall: {secondLeastDosage.Medication} of {secondLeastDosage.Dosage} milligram");
            }
            else
            {
                Console.WriteLine("No medications found");
            }
            Console.WriteLine("--------------------------SORT BY MEDICATION NAME-------------------------------------------");
            HospitalMedication[] sortedMedications = SortByMedicationName(hospitalMedications);
            Console.WriteLine("Medications sorted by name:");
            foreach (HospitalMedication medication in sortedMedications)
            {
                Console.WriteLine($"{medication.Medication} of {medication.Dosage} milligram");
            }
        }
        public static HospitalMedication FindMaxDosageByDoctor(HospitalMedication[] hospitalMedications, string doctorName)
        {
            HospitalMedication maxDosageMedication = null;
            double maxDosage = 0;

            foreach (HospitalMedication medication in hospitalMedications)
            {
                if (medication.DoctorName == doctorName && medication.Dosage > maxDosage)
                {
                    maxDosageMedication = medication;
                    maxDosage = medication.Dosage;
                }
            }

            return maxDosageMedication;
        }
        public static HospitalMedication FindSecondLeastDosageOverall(HospitalMedication[] hospitalMedications)
        {
            double minDosage = double.MaxValue;
            double secondMinDosage = double.MaxValue;
            HospitalMedication secondLeastDosageMedication = null;

            foreach (HospitalMedication medication in hospitalMedications)
            {
                if (medication.Dosage < minDosage)
                {
                    secondMinDosage = minDosage;
                    minDosage = medication.Dosage;
                    secondLeastDosageMedication = medication;
                }
                else if (medication.Dosage < secondMinDosage && medication.Dosage != minDosage)
                {
                    secondMinDosage = medication.Dosage;
                    secondLeastDosageMedication = medication;
                }
            }

            return secondLeastDosageMedication;
        }

        //sorting
        public static HospitalMedication[] SortByMedicationName(HospitalMedication[] hospitalMedications)
        {
           
            for (int i = 0; i < hospitalMedications.Length - 1; i++)
            {
                for (int j = i + 1; j < hospitalMedications.Length; j++)
                {
                    if (string.Compare(hospitalMedications[i].Medication, hospitalMedications[j].Medication) > 0)
                    {
                        HospitalMedication temp = hospitalMedications[i];
                        hospitalMedications[i] = hospitalMedications[j];
                        hospitalMedications[j] = temp;
                    }
                }
            }

            return hospitalMedications;
        }
    }
}



=======================



Problem Statement: Interface and Inheritance in Hospital Equipment Management
- Define an interface: `IServiceable` with the following methods:
- `Service()` (void)
- `GetServiceStatus()` (string)
- Define a base class: `Equipment` with properties:
- `EquipmentID` (integer), `Name` (string)
- Define a derived class: `DiagnosticEquipment` that inherits from `Equipment` and implements `IServiceable`:
- Additional Property: `LastServiceDate` (DateTime)
- Implement `Service()` to update the service date.
- Implement `GetServiceStatus()` to return whether the equipment is due for service.
- Define another derived class: `SurgicalEquipment` that also inherits from `Equipment` and implements `IServiceable`:
- Additional Property: `UsageCount` (integer)
- Implement `Service()` to reset the usage count.
- Implement `GetServiceStatus()` to return service status based on usage.
- Tasks:
1. Manage Equipment:
- Read details for N `equipments` of both types (Diagnostic and Surgical).
2. Perform Service:
- Call `Service()` on all equipment and display the updated status.
3. Service Status Check:
- Implement a method to display the service status of all equipment.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exam_q2
{
    public interface IServiceable
    {
        void Service();
        string GetServiceStatus();

    }

    public class Equipment
    {
        public int EquipmentID { get; set; }
        public string Name { get; set; }

        public Equipment(int  equipmentID, string name)
        {
            EquipmentID = equipmentID;
            Name = name;
        }
    }

    public class DiagnosticEquipment : Equipment, IServiceable
    {
        public DateTime LastServiceDate { get; set; }


        public DiagnosticEquipment(int equipmentID, string name, DateTime lastServiceDate) : base(equipmentID, name)
        {
            LastServiceDate = lastServiceDate;
        }

        public void Service()
        {
            LastServiceDate = DateTime.Now;
        }

        public string GetServiceStatus()
        {

            TimeSpan Lastservicediff = DateTime.Now - LastServiceDate;
            if (Lastservicediff.Days > 180) //6months
            {
                return "Due date is finished needed service";
            }
            else
            {
                return "Service done recently";
            }
        }
    }
    public class SurgicalEquipment : Equipment, IServiceable
    {
        public int UsageCount { get; set; }

        public SurgicalEquipment(int equipmentID,string name, int usageCount) : base(equipmentID, name)
        {
            UsageCount = usageCount;
        }

        //reseting the usagecount
        public void Service()
        {
            UsageCount = 0;
        }

        public string GetServiceStatus()
        {
            if (UsageCount > 50)
            {
                return "Due for service";
            }
            else
            {
                return "In good Condition";
            }

        }


    }

   
    internal class Program
    {
        static void Main(string[] args)
        {
            {
                Console.Write("Enter the number of equipments:");
                int N = int.Parse(Console.ReadLine());

                // 1.Manage Equipment


                Equipment[] equipments = new Equipment[N];
                Console.WriteLine("=================================Enter details for equipment ========================");
                for (int i = 0; i < N; i++)
                {

                    Console.Write("Equipment Type (1 for Diagnostic, 2 for Surgical): ");
                    int type = int.Parse(Console.ReadLine());

                    Console.Write("Equipment ID: ");
                    int equipmentID = int.Parse(Console.ReadLine());

                    Console.Write("Name: ");
                    string name = Console.ReadLine();

                    if (type == 1) // Diagnostic Equipment
                    {
                        Console.Write("Last Service Date (YYYY-MM-DD): ");
                        DateTime lastServiceDate = DateTime.Parse(Console.ReadLine());

                        equipments[i] = new DiagnosticEquipment(equipmentID, name, lastServiceDate);
                    }
                    else if (type == 2) // Surgical Equipment
                    {
                        Console.Write("Usage Count: ");
                        int usageCount = int.Parse(Console.ReadLine());

                        equipments[i] = new SurgicalEquipment(equipmentID, name, usageCount);
                    }
                }



                //2. Perform Service on all equipment

                Console.WriteLine("===============================Perform Service on all equipment============================");
                foreach (var equipment in equipments)
                {
                    if (equipment is IServiceable serviceable)
                    {
                        serviceable.Service();
                        Console.WriteLine($"Equipment ID: {equipment.EquipmentID}, Name: {equipment.Name} has been serviced.");
                    }
                }

                //3.Service Status of all equipment
                Console.WriteLine("============================Service Status of all equipment==================================");
         
                foreach (var equipment in equipments)
                {
                    if (equipment is IServiceable serviceable)
                    {
                        string status = serviceable.GetServiceStatus();
                        Console.WriteLine($"Equipment ID: {equipment.EquipmentID}, Name: {equipment.Name}, Status: {status}");
                    }
                }
            }
        }
    }
}